
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  credits: 'credits',
  tag: 'tag'
};

exports.Prisma.PlanScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  seats: 'seats',
  startedWithCredits: 'startedWithCredits',
  startedWithSeats: 'startedWithSeats'
};

exports.Prisma.CloudSettingsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  testingCompetitionFeature: 'testingCompetitionFeature'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  companyId: 'companyId',
  createdAt: 'createdAt',
  image: 'image',
  userRole: 'userRole',
  tag: 'tag'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  imei: 'imei',
  companyId: 'companyId',
  model: 'model',
  createdAt: 'createdAt',
  brand: 'brand',
  code: 'code',
  simSlots: 'simSlots',
  batteryTech: 'batteryTech',
  cpu: 'cpu',
  voltage: 'voltage',
  serial: 'serial',
  mAh: 'mAh'
};

exports.Prisma.TestResultScalarFieldEnum = {
  id: 'id',
  result: 'result',
  testerId: 'testerId',
  deviceId: 'deviceId',
  status: 'status',
  time: 'time',
  batteryLife: 'batteryLife',
  cycleCount: 'cycleCount',
  frp: 'frp',
  imei: 'imei',
  knox: 'knox',
  mdm: 'mdm',
  osVersion: 'osVersion',
  serial: 'serial',
  uid: 'uid',
  grade: 'grade',
  carrier: 'carrier',
  storage: 'storage',
  modelName: 'modelName',
  frontCameraImage: 'frontCameraImage',
  rearCameraImage: 'rearCameraImage',
  telephotoImage: 'telephotoImage',
  ultrawideImage: 'ultrawideImage',
  ram: 'ram'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  testResultId: 'testResultId',
  expiration: 'expiration',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.CloudSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  imei: 'imei',
  createdAt: 'createdAt',
  amount: 'amount',
  balanceAfter: 'balanceAfter',
  description: 'description',
  processedAt: 'processedAt',
  reason: 'reason',
  reference: 'reference',
  status: 'status',
  type: 'type',
  userId: 'userId'
};

exports.Prisma.MobileNetworksScalarFieldEnum = {
  id: 'id',
  mcc: 'mcc',
  mnc: 'mnc',
  network: 'network',
  iso: 'iso',
  country: 'country',
  countryCode: 'countryCode'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ULTRA: 'ULTRA',
  SUPPORT: 'SUPPORT',
  ADMIN: 'ADMIN',
  TESTER: 'TESTER',
  TECHNICIAN: 'TECHNICIAN'
};

exports.TransactionReason = exports.$Enums.TransactionReason = {
  PURCHASE: 'PURCHASE',
  DEVICE_TEST: 'DEVICE_TEST',
  REFUND: 'REFUND',
  ADJUSTMENT: 'ADJUSTMENT',
  PROMOTION: 'PROMOTION',
  TRANSFER: 'TRANSFER',
  UNKNOWN: 'UNKNOWN'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REVERSED: 'REVERSED'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  CREDIT: 'CREDIT',
  DEBIT: 'DEBIT'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  Plan: 'Plan',
  CloudSettings: 'CloudSettings',
  User: 'User',
  Device: 'Device',
  TestResult: 'TestResult',
  Certificate: 'Certificate',
  Session: 'Session',
  CloudSession: 'CloudSession',
  Transaction: 'Transaction',
  MobileNetworks: 'MobileNetworks'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
