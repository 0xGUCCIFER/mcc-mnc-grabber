# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _TransactionTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.TransactionType']]


class _TransactionTypeListFilterHasInput(TypedDict):
    has: 'enums.TransactionType'


class _TransactionTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.TransactionType']


class _TransactionTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.TransactionType']


class _TransactionTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


TransactionTypeListFilter = Union[
    _TransactionTypeListFilterHasInput,
    _TransactionTypeListFilterEqualsInput,
    _TransactionTypeListFilterHasSomeInput,
    _TransactionTypeListFilterIsEmptyInput,
    _TransactionTypeListFilterHasEveryInput,
]


class _TransactionTypeListUpdateSet(TypedDict):
    set: List['enums.TransactionType']


class _TransactionTypeListUpdatePush(TypedDict):
    push: List['enums.TransactionType']


TransactionTypeListUpdate = Union[
    List['enums.TransactionType'],
    _TransactionTypeListUpdateSet,
    _TransactionTypeListUpdatePush,
]

class _TransactionReasonListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.TransactionReason']]


class _TransactionReasonListFilterHasInput(TypedDict):
    has: 'enums.TransactionReason'


class _TransactionReasonListFilterHasEveryInput(TypedDict):
    has_every: List['enums.TransactionReason']


class _TransactionReasonListFilterHasSomeInput(TypedDict):
    has_some: List['enums.TransactionReason']


class _TransactionReasonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


TransactionReasonListFilter = Union[
    _TransactionReasonListFilterHasInput,
    _TransactionReasonListFilterEqualsInput,
    _TransactionReasonListFilterHasSomeInput,
    _TransactionReasonListFilterIsEmptyInput,
    _TransactionReasonListFilterHasEveryInput,
]


class _TransactionReasonListUpdateSet(TypedDict):
    set: List['enums.TransactionReason']


class _TransactionReasonListUpdatePush(TypedDict):
    push: List['enums.TransactionReason']


TransactionReasonListUpdate = Union[
    List['enums.TransactionReason'],
    _TransactionReasonListUpdateSet,
    _TransactionReasonListUpdatePush,
]

class _TransactionStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.TransactionStatus']]


class _TransactionStatusListFilterHasInput(TypedDict):
    has: 'enums.TransactionStatus'


class _TransactionStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.TransactionStatus']


class _TransactionStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.TransactionStatus']


class _TransactionStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


TransactionStatusListFilter = Union[
    _TransactionStatusListFilterHasInput,
    _TransactionStatusListFilterEqualsInput,
    _TransactionStatusListFilterHasSomeInput,
    _TransactionStatusListFilterIsEmptyInput,
    _TransactionStatusListFilterHasEveryInput,
]


class _TransactionStatusListUpdateSet(TypedDict):
    set: List['enums.TransactionStatus']


class _TransactionStatusListUpdatePush(TypedDict):
    push: List['enums.TransactionStatus']


TransactionStatusListUpdate = Union[
    List['enums.TransactionStatus'],
    _TransactionStatusListUpdateSet,
    _TransactionStatusListUpdatePush,
]

class _UserRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserRole']]


class _UserRoleListFilterHasInput(TypedDict):
    has: 'enums.UserRole'


class _UserRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserRole']


class _UserRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserRole']


class _UserRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserRoleListFilter = Union[
    _UserRoleListFilterHasInput,
    _UserRoleListFilterEqualsInput,
    _UserRoleListFilterHasSomeInput,
    _UserRoleListFilterIsEmptyInput,
    _UserRoleListFilterHasEveryInput,
]


class _UserRoleListUpdateSet(TypedDict):
    set: List['enums.UserRole']


class _UserRoleListUpdatePush(TypedDict):
    push: List['enums.UserRole']


UserRoleListUpdate = Union[
    List['enums.UserRole'],
    _UserRoleListUpdateSet,
    _UserRoleListUpdatePush,
]


# Company types

class CompanyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Company create method"""
    id: _str
    createdAt: datetime.datetime
    credits: _int
    tag: _str
    cloudSettings: 'CloudSettingsCreateNestedWithoutRelationsInput'
    devices: 'DeviceCreateManyNestedWithoutRelationsInput'
    plan: 'PlanCreateNestedWithoutRelationsInput'
    transactions: 'TransactionCreateManyNestedWithoutRelationsInput'
    users: 'UserCreateManyNestedWithoutRelationsInput'


class CompanyCreateInput(CompanyOptionalCreateInput):
    """Required arguments to the Company create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CompanyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Company create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    credits: _int
    tag: _str


class CompanyCreateWithoutRelationsInput(CompanyOptionalCreateWithoutRelationsInput):
    """Required arguments to the Company create method, without relations"""
    name: _str

class CompanyConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CompanyCreateWithoutRelationsInput'
    where: 'CompanyWhereUniqueInput'

class CompanyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    connect_or_create: 'CompanyConnectOrCreateWithoutRelationsInput'


class CompanyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CompanyCreateWithoutRelationsInput', List['CompanyCreateWithoutRelationsInput']]
    connect: Union['CompanyWhereUniqueInput', List['CompanyWhereUniqueInput']]
    connect_or_create: Union['CompanyConnectOrCreateWithoutRelationsInput', List['CompanyConnectOrCreateWithoutRelationsInput']]

_CompanyWhereUnique_id_Input = TypedDict(
    '_CompanyWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

CompanyWhereUniqueInput = _CompanyWhereUnique_id_Input


class CompanyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    credits: Union[AtomicIntInput, _int]
    tag: _str
    cloudSettings: 'CloudSettingsUpdateOneWithoutRelationsInput'
    devices: 'DeviceUpdateManyWithoutRelationsInput'
    plan: 'PlanUpdateOneWithoutRelationsInput'
    transactions: 'TransactionUpdateManyWithoutRelationsInput'
    users: 'UserUpdateManyWithoutRelationsInput'


class CompanyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    credits: Union[AtomicIntInput, _int]
    tag: _str


class CompanyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CompanyCreateWithoutRelationsInput']
    connect: List['CompanyWhereUniqueInput']
    connect_or_create: List['CompanyConnectOrCreateWithoutRelationsInput']
    set: List['CompanyWhereUniqueInput']
    disconnect: List['CompanyWhereUniqueInput']
    delete: List['CompanyWhereUniqueInput']

    # TODO
    # update: List['CompanyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CompanyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CompanyScalarWhereInput']
    # upsert: List['CompanyUpserteWithWhereUniqueWithoutRelationsInput']


class CompanyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CompanyCreateWithoutRelationsInput'
    connect: 'CompanyWhereUniqueInput'
    connect_or_create: 'CompanyConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CompanyUpdateInput'
    # upsert: 'CompanyUpsertWithoutRelationsInput'


class CompanyUpsertInput(TypedDict):
    create: 'CompanyCreateInput'
    update: 'CompanyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Company_id_OrderByInput = TypedDict(
    '_Company_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Company_name_OrderByInput = TypedDict(
    '_Company_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Company_createdAt_OrderByInput = TypedDict(
    '_Company_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Company_credits_OrderByInput = TypedDict(
    '_Company_credits_OrderByInput',
    {
        'credits': 'SortOrder',
    },
    total=True
)

_Company_tag_OrderByInput = TypedDict(
    '_Company_tag_OrderByInput',
    {
        'tag': 'SortOrder',
    },
    total=True
)

_Company_RelevanceInner = TypedDict(
    '_Company_RelevanceInner',
    {
        'fields': 'List[CompanyScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Company_RelevanceOrderByInput = TypedDict(
    '_Company_RelevanceOrderByInput',
    {
        '_relevance': '_Company_RelevanceInner',
    },
    total=True
)

CompanyOrderByInput = Union[
    '_Company_id_OrderByInput',
    '_Company_name_OrderByInput',
    '_Company_createdAt_OrderByInput',
    '_Company_credits_OrderByInput',
    '_Company_tag_OrderByInput',
    '_Company_RelevanceOrderByInput',
]



# recursive Company types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CompanyRelationFilter = TypedDict(
    'CompanyRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CompanyListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CompanyInclude(TypedDict, total=False):
    """Company relational arguments"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCompany']
    devices: Union[bool, 'FindManyDeviceArgsFromCompany']
    plan: Union[bool, 'PlanArgsFromCompany']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompany']
    users: Union[bool, 'FindManyUserArgsFromCompany']


    

class CompanyIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCompanyRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromCompanyRecursive1']
    plan: Union[bool, 'PlanArgsFromCompanyRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive1']
    users: Union[bool, 'FindManyUserArgsFromCompanyRecursive1']


class CompanyIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCompanyRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromCompanyRecursive2']
    plan: Union[bool, 'PlanArgsFromCompanyRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive2']
    users: Union[bool, 'FindManyUserArgsFromCompanyRecursive2']


class CompanyIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCompanyRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromCompanyRecursive3']
    plan: Union[bool, 'PlanArgsFromCompanyRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive3']
    users: Union[bool, 'FindManyUserArgsFromCompanyRecursive3']


class CompanyIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCompanyRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromCompanyRecursive4']
    plan: Union[bool, 'PlanArgsFromCompanyRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive4']
    users: Union[bool, 'FindManyUserArgsFromCompanyRecursive4']


class CompanyIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCompanyArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive1']


class PlanIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive2']


class PlanIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive3']


class PlanIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive4']


class PlanIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class PlanArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyPlanArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive1']


class CloudSettingsIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive2']


class CloudSettingsIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive3']


class CloudSettingsIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive4']


class CloudSettingsIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CloudSettingsArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCloudSettingsArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCompanyRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromCompanyRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive1']
    company: Union[bool, 'CompanyArgsFromCompanyRecursive1']


class UserIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCompanyRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromCompanyRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive2']
    company: Union[bool, 'CompanyArgsFromCompanyRecursive2']


class UserIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCompanyRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromCompanyRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive3']
    company: Union[bool, 'CompanyArgsFromCompanyRecursive3']


class UserIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCompanyRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromCompanyRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCompanyRecursive4']
    company: Union[bool, 'CompanyArgsFromCompanyRecursive4']


class UserIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class UserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyUserArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive1']


class DeviceIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive2']


class DeviceIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive3']


class DeviceIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCompanyRecursive4']


class DeviceIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class DeviceArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyDeviceArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    certificate: Union[bool, 'CertificateArgsFromCompanyRecursive1']
    device: Union[bool, 'DeviceArgsFromCompanyRecursive1']
    tester: Union[bool, 'UserArgsFromCompanyRecursive1']


class TestResultIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    certificate: Union[bool, 'CertificateArgsFromCompanyRecursive2']
    device: Union[bool, 'DeviceArgsFromCompanyRecursive2']
    tester: Union[bool, 'UserArgsFromCompanyRecursive2']


class TestResultIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    certificate: Union[bool, 'CertificateArgsFromCompanyRecursive3']
    device: Union[bool, 'DeviceArgsFromCompanyRecursive3']
    tester: Union[bool, 'UserArgsFromCompanyRecursive3']


class TestResultIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    certificate: Union[bool, 'CertificateArgsFromCompanyRecursive4']
    device: Union[bool, 'DeviceArgsFromCompanyRecursive4']
    tester: Union[bool, 'UserArgsFromCompanyRecursive4']


class TestResultIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class TestResultArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyTestResultArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    testResult: Union[bool, 'TestResultArgsFromCompanyRecursive1']


class CertificateIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    testResult: Union[bool, 'TestResultArgsFromCompanyRecursive2']


class CertificateIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    testResult: Union[bool, 'TestResultArgsFromCompanyRecursive3']


class CertificateIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    testResult: Union[bool, 'TestResultArgsFromCompanyRecursive4']


class CertificateIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CertificateArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCertificateArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive1']


class SessionIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive2']


class SessionIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive3']


class SessionIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive4']


class SessionIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class SessionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManySessionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive1']


class CloudSessionIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive2']


class CloudSessionIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive3']


class CloudSessionIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    user: Union[bool, 'UserArgsFromCompanyRecursive4']


class CloudSessionIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class CloudSessionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyCloudSessionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive1']
    user: Union[bool, 'UserArgsFromCompanyRecursive1']


class TransactionIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive2']
    user: Union[bool, 'UserArgsFromCompanyRecursive2']


class TransactionIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive3']
    user: Union[bool, 'UserArgsFromCompanyRecursive3']


class TransactionIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""
    company: Union[bool, 'CompanyArgsFromCompanyRecursive4']
    user: Union[bool, 'UserArgsFromCompanyRecursive4']


class TransactionIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class TransactionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyTransactionArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromCompany(TypedDict, total=False):
    """Relational arguments for Company"""


class MobileNetworksIncludeFromCompanyRecursive1(TypedDict, total=False):
    """Relational arguments for Company"""


class MobileNetworksIncludeFromCompanyRecursive2(TypedDict, total=False):
    """Relational arguments for Company"""


class MobileNetworksIncludeFromCompanyRecursive3(TypedDict, total=False):
    """Relational arguments for Company"""


class MobileNetworksIncludeFromCompanyRecursive4(TypedDict, total=False):
    """Relational arguments for Company"""

    

class MobileNetworksArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    
    

class FindManyMobileNetworksArgsFromCompany(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromCompanyRecursive1(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromCompanyRecursive2(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromCompanyRecursive3(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromCompanyRecursive4(TypedDict, total=False):
    """Arguments for Company"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyCompanyArgs = FindManyCompanyArgsFromCompany
FindFirstCompanyArgs = FindManyCompanyArgsFromCompany


    

class CompanyWhereInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    credits: Union[_int, 'types.IntFilter']
    tag: Union[_str, 'types.StringFilter']
    cloudSettings: 'CloudSettingsRelationFilter'
    devices: 'DeviceListRelationFilter'
    plan: 'PlanRelationFilter'
    transactions: 'TransactionListRelationFilter'
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive1', List['CompanyWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive1']
    OR: List['CompanyWhereInputRecursive1']
    NOT: List['CompanyWhereInputRecursive1']


class CompanyWhereInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    credits: Union[_int, 'types.IntFilter']
    tag: Union[_str, 'types.StringFilter']
    cloudSettings: 'CloudSettingsRelationFilter'
    devices: 'DeviceListRelationFilter'
    plan: 'PlanRelationFilter'
    transactions: 'TransactionListRelationFilter'
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive2', List['CompanyWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive2']
    OR: List['CompanyWhereInputRecursive2']
    NOT: List['CompanyWhereInputRecursive2']


class CompanyWhereInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    credits: Union[_int, 'types.IntFilter']
    tag: Union[_str, 'types.StringFilter']
    cloudSettings: 'CloudSettingsRelationFilter'
    devices: 'DeviceListRelationFilter'
    plan: 'PlanRelationFilter'
    transactions: 'TransactionListRelationFilter'
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive3', List['CompanyWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive3']
    OR: List['CompanyWhereInputRecursive3']
    NOT: List['CompanyWhereInputRecursive3']


class CompanyWhereInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    credits: Union[_int, 'types.IntFilter']
    tag: Union[_str, 'types.StringFilter']
    cloudSettings: 'CloudSettingsRelationFilter'
    devices: 'DeviceListRelationFilter'
    plan: 'PlanRelationFilter'
    transactions: 'TransactionListRelationFilter'
    users: 'UserListRelationFilter'

    # should be noted that AND and NOT should be Union['CompanyWhereInputRecursive4', List['CompanyWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CompanyWhereInputRecursive4']
    OR: List['CompanyWhereInputRecursive4']
    NOT: List['CompanyWhereInputRecursive4']


class CompanyWhereInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    credits: Union[_int, 'types.IntFilter']
    tag: Union[_str, 'types.StringFilter']
    cloudSettings: 'CloudSettingsRelationFilter'
    devices: 'DeviceListRelationFilter'
    plan: 'PlanRelationFilter'
    transactions: 'TransactionListRelationFilter'
    users: 'UserListRelationFilter'



# aggregate Company types


    

class CompanyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    credits: Union[_int, 'types.IntWithAggregatesFilter']
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive1']


class CompanyScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    credits: Union[_int, 'types.IntWithAggregatesFilter']
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive2']


class CompanyScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    credits: Union[_int, 'types.IntWithAggregatesFilter']
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive3']


class CompanyScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    credits: Union[_int, 'types.IntWithAggregatesFilter']
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    OR: List['CompanyScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CompanyScalarWhereWithAggregatesInputRecursive4']


class CompanyScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Company arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    credits: Union[_int, 'types.IntWithAggregatesFilter']
    tag: Union[_str, 'types.StringWithAggregatesFilter']



class CompanyGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    createdAt: datetime.datetime
    credits: _int
    tag: _str
    _sum: 'CompanySumAggregateOutput'
    _avg: 'CompanyAvgAggregateOutput'
    _min: 'CompanyMinAggregateOutput'
    _max: 'CompanyMaxAggregateOutput'
    _count: 'CompanyCountAggregateOutput'


class CompanyAvgAggregateOutput(TypedDict, total=False):
    """Company output for aggregating averages"""
    credits: float


class CompanySumAggregateOutput(TypedDict, total=False):
    """Company output for aggregating sums"""
    credits: _int


class CompanyScalarAggregateOutput(TypedDict, total=False):
    """Company output including scalar fields"""
    id: _str
    name: _str
    createdAt: datetime.datetime
    credits: _int
    tag: _str


CompanyMinAggregateOutput = CompanyScalarAggregateOutput
CompanyMaxAggregateOutput = CompanyScalarAggregateOutput


class CompanyMaxAggregateInput(TypedDict, total=False):
    """Company input for aggregating by max"""
    id: bool
    name: bool
    createdAt: bool
    credits: bool
    tag: bool


class CompanyMinAggregateInput(TypedDict, total=False):
    """Company input for aggregating by min"""
    id: bool
    name: bool
    createdAt: bool
    credits: bool
    tag: bool


class CompanyNumberAggregateInput(TypedDict, total=False):
    """Company input for aggregating numbers"""
    credits: bool


CompanyAvgAggregateInput = CompanyNumberAggregateInput
CompanySumAggregateInput = CompanyNumberAggregateInput


CompanyCountAggregateInput = TypedDict(
    'CompanyCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'createdAt': bool,
        'credits': bool,
        'tag': bool,
        '_all': bool,
    },
    total=False,
)

CompanyCountAggregateOutput = TypedDict(
    'CompanyCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'createdAt': int,
        'credits': int,
        'tag': int,
        '_all': int,
    },
    total=False,
)


CompanyKeys = Literal[
    'id',
    'name',
    'createdAt',
    'credits',
    'tag',
    'cloudSettings',
    'devices',
    'plan',
    'transactions',
    'users',
]
CompanyScalarFieldKeys = Literal[
    'id',
    'name',
    'createdAt',
    'credits',
    'tag',
]
CompanyScalarFieldKeysT = TypeVar('CompanyScalarFieldKeysT', bound=CompanyScalarFieldKeys)

CompanyRelationalFieldKeys = Literal[
        'cloudSettings',
        'devices',
        'plan',
        'transactions',
        'users',
    ]

# Plan types

class PlanOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Plan create method"""
    id: _str
    companyId: _str
    seats: _int
    startedWithCredits: _int
    startedWithSeats: _int
    company: 'CompanyCreateNestedWithoutRelationsInput'


class PlanCreateInput(PlanOptionalCreateInput):
    """Required arguments to the Plan create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PlanOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Plan create method, without relations"""
    id: _str
    companyId: _str
    seats: _int
    startedWithCredits: _int
    startedWithSeats: _int


class PlanCreateWithoutRelationsInput(PlanOptionalCreateWithoutRelationsInput):
    """Required arguments to the Plan create method, without relations"""

class PlanConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PlanCreateWithoutRelationsInput'
    where: 'PlanWhereUniqueInput'

class PlanCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PlanCreateWithoutRelationsInput'
    connect: 'PlanWhereUniqueInput'
    connect_or_create: 'PlanConnectOrCreateWithoutRelationsInput'


class PlanCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PlanCreateWithoutRelationsInput', List['PlanCreateWithoutRelationsInput']]
    connect: Union['PlanWhereUniqueInput', List['PlanWhereUniqueInput']]
    connect_or_create: Union['PlanConnectOrCreateWithoutRelationsInput', List['PlanConnectOrCreateWithoutRelationsInput']]

_PlanWhereUnique_id_Input = TypedDict(
    '_PlanWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PlanWhereUnique_companyId_Input = TypedDict(
    '_PlanWhereUnique_companyId_Input',
    {
        'companyId': '_str',
    },
    total=True
)

PlanWhereUniqueInput = Union[
    '_PlanWhereUnique_id_Input',
    '_PlanWhereUnique_companyId_Input',
]


class PlanUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    seats: Union[AtomicIntInput, _int]
    startedWithCredits: Union[AtomicIntInput, _int]
    startedWithSeats: Union[AtomicIntInput, _int]
    company: 'CompanyUpdateOneWithoutRelationsInput'


class PlanUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    seats: Union[AtomicIntInput, _int]
    startedWithCredits: Union[AtomicIntInput, _int]
    startedWithSeats: Union[AtomicIntInput, _int]


class PlanUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PlanCreateWithoutRelationsInput']
    connect: List['PlanWhereUniqueInput']
    connect_or_create: List['PlanConnectOrCreateWithoutRelationsInput']
    set: List['PlanWhereUniqueInput']
    disconnect: List['PlanWhereUniqueInput']
    delete: List['PlanWhereUniqueInput']

    # TODO
    # update: List['PlanUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PlanUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PlanScalarWhereInput']
    # upsert: List['PlanUpserteWithWhereUniqueWithoutRelationsInput']


class PlanUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PlanCreateWithoutRelationsInput'
    connect: 'PlanWhereUniqueInput'
    connect_or_create: 'PlanConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PlanUpdateInput'
    # upsert: 'PlanUpsertWithoutRelationsInput'


class PlanUpsertInput(TypedDict):
    create: 'PlanCreateInput'
    update: 'PlanUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Plan_id_OrderByInput = TypedDict(
    '_Plan_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Plan_companyId_OrderByInput = TypedDict(
    '_Plan_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_Plan_seats_OrderByInput = TypedDict(
    '_Plan_seats_OrderByInput',
    {
        'seats': 'SortOrder',
    },
    total=True
)

_Plan_startedWithCredits_OrderByInput = TypedDict(
    '_Plan_startedWithCredits_OrderByInput',
    {
        'startedWithCredits': 'SortOrder',
    },
    total=True
)

_Plan_startedWithSeats_OrderByInput = TypedDict(
    '_Plan_startedWithSeats_OrderByInput',
    {
        'startedWithSeats': 'SortOrder',
    },
    total=True
)

_Plan_RelevanceInner = TypedDict(
    '_Plan_RelevanceInner',
    {
        'fields': 'List[PlanScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Plan_RelevanceOrderByInput = TypedDict(
    '_Plan_RelevanceOrderByInput',
    {
        '_relevance': '_Plan_RelevanceInner',
    },
    total=True
)

PlanOrderByInput = Union[
    '_Plan_id_OrderByInput',
    '_Plan_companyId_OrderByInput',
    '_Plan_seats_OrderByInput',
    '_Plan_startedWithCredits_OrderByInput',
    '_Plan_startedWithSeats_OrderByInput',
    '_Plan_RelevanceOrderByInput',
]



# recursive Plan types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

PlanRelationFilter = TypedDict(
    'PlanRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class PlanListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class PlanInclude(TypedDict, total=False):
    """Plan relational arguments"""
    company: Union[bool, 'CompanyArgsFromPlan']


    

class CompanyIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromPlanRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromPlanRecursive1']
    plan: Union[bool, 'PlanArgsFromPlanRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive1']
    users: Union[bool, 'FindManyUserArgsFromPlanRecursive1']


class CompanyIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromPlanRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromPlanRecursive2']
    plan: Union[bool, 'PlanArgsFromPlanRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive2']
    users: Union[bool, 'FindManyUserArgsFromPlanRecursive2']


class CompanyIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromPlanRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromPlanRecursive3']
    plan: Union[bool, 'PlanArgsFromPlanRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive3']
    users: Union[bool, 'FindManyUserArgsFromPlanRecursive3']


class CompanyIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromPlanRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromPlanRecursive4']
    plan: Union[bool, 'PlanArgsFromPlanRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive4']
    users: Union[bool, 'FindManyUserArgsFromPlanRecursive4']


class CompanyIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class CompanyArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyCompanyArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive1']


class PlanIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive2']


class PlanIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive3']


class PlanIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive4']


class PlanIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class PlanArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyPlanArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive1']


class CloudSettingsIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive2']


class CloudSettingsIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive3']


class CloudSettingsIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive4']


class CloudSettingsIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class CloudSettingsArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyCloudSettingsArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromPlanRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromPlanRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive1']
    company: Union[bool, 'CompanyArgsFromPlanRecursive1']


class UserIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromPlanRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromPlanRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive2']
    company: Union[bool, 'CompanyArgsFromPlanRecursive2']


class UserIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromPlanRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromPlanRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive3']
    company: Union[bool, 'CompanyArgsFromPlanRecursive3']


class UserIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromPlanRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromPlanRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromPlanRecursive4']
    company: Union[bool, 'CompanyArgsFromPlanRecursive4']


class UserIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class UserArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyUserArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive1']


class DeviceIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive2']


class DeviceIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive3']


class DeviceIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromPlanRecursive4']


class DeviceIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class DeviceArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyDeviceArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    certificate: Union[bool, 'CertificateArgsFromPlanRecursive1']
    device: Union[bool, 'DeviceArgsFromPlanRecursive1']
    tester: Union[bool, 'UserArgsFromPlanRecursive1']


class TestResultIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    certificate: Union[bool, 'CertificateArgsFromPlanRecursive2']
    device: Union[bool, 'DeviceArgsFromPlanRecursive2']
    tester: Union[bool, 'UserArgsFromPlanRecursive2']


class TestResultIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    certificate: Union[bool, 'CertificateArgsFromPlanRecursive3']
    device: Union[bool, 'DeviceArgsFromPlanRecursive3']
    tester: Union[bool, 'UserArgsFromPlanRecursive3']


class TestResultIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    certificate: Union[bool, 'CertificateArgsFromPlanRecursive4']
    device: Union[bool, 'DeviceArgsFromPlanRecursive4']
    tester: Union[bool, 'UserArgsFromPlanRecursive4']


class TestResultIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class TestResultArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyTestResultArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    testResult: Union[bool, 'TestResultArgsFromPlanRecursive1']


class CertificateIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    testResult: Union[bool, 'TestResultArgsFromPlanRecursive2']


class CertificateIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    testResult: Union[bool, 'TestResultArgsFromPlanRecursive3']


class CertificateIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    testResult: Union[bool, 'TestResultArgsFromPlanRecursive4']


class CertificateIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class CertificateArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyCertificateArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive1']


class SessionIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive2']


class SessionIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive3']


class SessionIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive4']


class SessionIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class SessionArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManySessionArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive1']


class CloudSessionIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive2']


class CloudSessionIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive3']


class CloudSessionIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    user: Union[bool, 'UserArgsFromPlanRecursive4']


class CloudSessionIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class CloudSessionArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyCloudSessionArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive1']
    user: Union[bool, 'UserArgsFromPlanRecursive1']


class TransactionIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive2']
    user: Union[bool, 'UserArgsFromPlanRecursive2']


class TransactionIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive3']
    user: Union[bool, 'UserArgsFromPlanRecursive3']


class TransactionIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""
    company: Union[bool, 'CompanyArgsFromPlanRecursive4']
    user: Union[bool, 'UserArgsFromPlanRecursive4']


class TransactionIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class TransactionArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyTransactionArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromPlan(TypedDict, total=False):
    """Relational arguments for Plan"""


class MobileNetworksIncludeFromPlanRecursive1(TypedDict, total=False):
    """Relational arguments for Plan"""


class MobileNetworksIncludeFromPlanRecursive2(TypedDict, total=False):
    """Relational arguments for Plan"""


class MobileNetworksIncludeFromPlanRecursive3(TypedDict, total=False):
    """Relational arguments for Plan"""


class MobileNetworksIncludeFromPlanRecursive4(TypedDict, total=False):
    """Relational arguments for Plan"""

    

class MobileNetworksArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    
    

class FindManyMobileNetworksArgsFromPlan(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromPlanRecursive1(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromPlanRecursive2(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromPlanRecursive3(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromPlanRecursive4(TypedDict, total=False):
    """Arguments for Plan"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyPlanArgs = FindManyPlanArgsFromPlan
FindFirstPlanArgs = FindManyPlanArgsFromPlan


    

class PlanWhereInput(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    seats: Union[_int, 'types.IntFilter']
    startedWithCredits: Union[_int, 'types.IntFilter']
    startedWithSeats: Union[_int, 'types.IntFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['PlanWhereInputRecursive1', List['PlanWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['PlanWhereInputRecursive1']
    OR: List['PlanWhereInputRecursive1']
    NOT: List['PlanWhereInputRecursive1']


class PlanWhereInputRecursive1(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    seats: Union[_int, 'types.IntFilter']
    startedWithCredits: Union[_int, 'types.IntFilter']
    startedWithSeats: Union[_int, 'types.IntFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['PlanWhereInputRecursive2', List['PlanWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['PlanWhereInputRecursive2']
    OR: List['PlanWhereInputRecursive2']
    NOT: List['PlanWhereInputRecursive2']


class PlanWhereInputRecursive2(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    seats: Union[_int, 'types.IntFilter']
    startedWithCredits: Union[_int, 'types.IntFilter']
    startedWithSeats: Union[_int, 'types.IntFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['PlanWhereInputRecursive3', List['PlanWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['PlanWhereInputRecursive3']
    OR: List['PlanWhereInputRecursive3']
    NOT: List['PlanWhereInputRecursive3']


class PlanWhereInputRecursive3(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    seats: Union[_int, 'types.IntFilter']
    startedWithCredits: Union[_int, 'types.IntFilter']
    startedWithSeats: Union[_int, 'types.IntFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['PlanWhereInputRecursive4', List['PlanWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['PlanWhereInputRecursive4']
    OR: List['PlanWhereInputRecursive4']
    NOT: List['PlanWhereInputRecursive4']


class PlanWhereInputRecursive4(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    seats: Union[_int, 'types.IntFilter']
    startedWithCredits: Union[_int, 'types.IntFilter']
    startedWithSeats: Union[_int, 'types.IntFilter']
    company: 'CompanyRelationFilter'



# aggregate Plan types


    

class PlanScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    seats: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithCredits: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithSeats: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PlanScalarWhereWithAggregatesInputRecursive1']
    OR: List['PlanScalarWhereWithAggregatesInputRecursive1']
    NOT: List['PlanScalarWhereWithAggregatesInputRecursive1']


class PlanScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    seats: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithCredits: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithSeats: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PlanScalarWhereWithAggregatesInputRecursive2']
    OR: List['PlanScalarWhereWithAggregatesInputRecursive2']
    NOT: List['PlanScalarWhereWithAggregatesInputRecursive2']


class PlanScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    seats: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithCredits: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithSeats: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PlanScalarWhereWithAggregatesInputRecursive3']
    OR: List['PlanScalarWhereWithAggregatesInputRecursive3']
    NOT: List['PlanScalarWhereWithAggregatesInputRecursive3']


class PlanScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    seats: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithCredits: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithSeats: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PlanScalarWhereWithAggregatesInputRecursive4']
    OR: List['PlanScalarWhereWithAggregatesInputRecursive4']
    NOT: List['PlanScalarWhereWithAggregatesInputRecursive4']


class PlanScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Plan arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    seats: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithCredits: Union[_int, 'types.IntWithAggregatesFilter']
    startedWithSeats: Union[_int, 'types.IntWithAggregatesFilter']



class PlanGroupByOutput(TypedDict, total=False):
    id: _str
    companyId: _str
    seats: _int
    startedWithCredits: _int
    startedWithSeats: _int
    _sum: 'PlanSumAggregateOutput'
    _avg: 'PlanAvgAggregateOutput'
    _min: 'PlanMinAggregateOutput'
    _max: 'PlanMaxAggregateOutput'
    _count: 'PlanCountAggregateOutput'


class PlanAvgAggregateOutput(TypedDict, total=False):
    """Plan output for aggregating averages"""
    seats: float
    startedWithCredits: float
    startedWithSeats: float


class PlanSumAggregateOutput(TypedDict, total=False):
    """Plan output for aggregating sums"""
    seats: _int
    startedWithCredits: _int
    startedWithSeats: _int


class PlanScalarAggregateOutput(TypedDict, total=False):
    """Plan output including scalar fields"""
    id: _str
    companyId: _str
    seats: _int
    startedWithCredits: _int
    startedWithSeats: _int


PlanMinAggregateOutput = PlanScalarAggregateOutput
PlanMaxAggregateOutput = PlanScalarAggregateOutput


class PlanMaxAggregateInput(TypedDict, total=False):
    """Plan input for aggregating by max"""
    id: bool
    companyId: bool
    seats: bool
    startedWithCredits: bool
    startedWithSeats: bool


class PlanMinAggregateInput(TypedDict, total=False):
    """Plan input for aggregating by min"""
    id: bool
    companyId: bool
    seats: bool
    startedWithCredits: bool
    startedWithSeats: bool


class PlanNumberAggregateInput(TypedDict, total=False):
    """Plan input for aggregating numbers"""
    seats: bool
    startedWithCredits: bool
    startedWithSeats: bool


PlanAvgAggregateInput = PlanNumberAggregateInput
PlanSumAggregateInput = PlanNumberAggregateInput


PlanCountAggregateInput = TypedDict(
    'PlanCountAggregateInput',
    {
        'id': bool,
        'companyId': bool,
        'seats': bool,
        'startedWithCredits': bool,
        'startedWithSeats': bool,
        '_all': bool,
    },
    total=False,
)

PlanCountAggregateOutput = TypedDict(
    'PlanCountAggregateOutput',
    {
        'id': int,
        'companyId': int,
        'seats': int,
        'startedWithCredits': int,
        'startedWithSeats': int,
        '_all': int,
    },
    total=False,
)


PlanKeys = Literal[
    'id',
    'companyId',
    'seats',
    'startedWithCredits',
    'startedWithSeats',
    'company',
]
PlanScalarFieldKeys = Literal[
    'id',
    'companyId',
    'seats',
    'startedWithCredits',
    'startedWithSeats',
]
PlanScalarFieldKeysT = TypeVar('PlanScalarFieldKeysT', bound=PlanScalarFieldKeys)

PlanRelationalFieldKeys = Literal[
        'company',
    ]

# CloudSettings types

class CloudSettingsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the CloudSettings create method"""
    id: _str
    companyId: _str
    testingCompetitionFeature: _bool
    company: 'CompanyCreateNestedWithoutRelationsInput'


class CloudSettingsCreateInput(CloudSettingsOptionalCreateInput):
    """Required arguments to the CloudSettings create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CloudSettingsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the CloudSettings create method, without relations"""
    id: _str
    companyId: _str
    testingCompetitionFeature: _bool


class CloudSettingsCreateWithoutRelationsInput(CloudSettingsOptionalCreateWithoutRelationsInput):
    """Required arguments to the CloudSettings create method, without relations"""

class CloudSettingsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CloudSettingsCreateWithoutRelationsInput'
    where: 'CloudSettingsWhereUniqueInput'

class CloudSettingsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CloudSettingsCreateWithoutRelationsInput'
    connect: 'CloudSettingsWhereUniqueInput'
    connect_or_create: 'CloudSettingsConnectOrCreateWithoutRelationsInput'


class CloudSettingsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CloudSettingsCreateWithoutRelationsInput', List['CloudSettingsCreateWithoutRelationsInput']]
    connect: Union['CloudSettingsWhereUniqueInput', List['CloudSettingsWhereUniqueInput']]
    connect_or_create: Union['CloudSettingsConnectOrCreateWithoutRelationsInput', List['CloudSettingsConnectOrCreateWithoutRelationsInput']]

_CloudSettingsWhereUnique_id_Input = TypedDict(
    '_CloudSettingsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_CloudSettingsWhereUnique_companyId_Input = TypedDict(
    '_CloudSettingsWhereUnique_companyId_Input',
    {
        'companyId': '_str',
    },
    total=True
)

CloudSettingsWhereUniqueInput = Union[
    '_CloudSettingsWhereUnique_id_Input',
    '_CloudSettingsWhereUnique_companyId_Input',
]


class CloudSettingsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    testingCompetitionFeature: _bool
    company: 'CompanyUpdateOneWithoutRelationsInput'


class CloudSettingsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    testingCompetitionFeature: _bool


class CloudSettingsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CloudSettingsCreateWithoutRelationsInput']
    connect: List['CloudSettingsWhereUniqueInput']
    connect_or_create: List['CloudSettingsConnectOrCreateWithoutRelationsInput']
    set: List['CloudSettingsWhereUniqueInput']
    disconnect: List['CloudSettingsWhereUniqueInput']
    delete: List['CloudSettingsWhereUniqueInput']

    # TODO
    # update: List['CloudSettingsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CloudSettingsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CloudSettingsScalarWhereInput']
    # upsert: List['CloudSettingsUpserteWithWhereUniqueWithoutRelationsInput']


class CloudSettingsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CloudSettingsCreateWithoutRelationsInput'
    connect: 'CloudSettingsWhereUniqueInput'
    connect_or_create: 'CloudSettingsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CloudSettingsUpdateInput'
    # upsert: 'CloudSettingsUpsertWithoutRelationsInput'


class CloudSettingsUpsertInput(TypedDict):
    create: 'CloudSettingsCreateInput'
    update: 'CloudSettingsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_CloudSettings_id_OrderByInput = TypedDict(
    '_CloudSettings_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_CloudSettings_companyId_OrderByInput = TypedDict(
    '_CloudSettings_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_CloudSettings_testingCompetitionFeature_OrderByInput = TypedDict(
    '_CloudSettings_testingCompetitionFeature_OrderByInput',
    {
        'testingCompetitionFeature': 'SortOrder',
    },
    total=True
)

_CloudSettings_RelevanceInner = TypedDict(
    '_CloudSettings_RelevanceInner',
    {
        'fields': 'List[CloudSettingsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_CloudSettings_RelevanceOrderByInput = TypedDict(
    '_CloudSettings_RelevanceOrderByInput',
    {
        '_relevance': '_CloudSettings_RelevanceInner',
    },
    total=True
)

CloudSettingsOrderByInput = Union[
    '_CloudSettings_id_OrderByInput',
    '_CloudSettings_companyId_OrderByInput',
    '_CloudSettings_testingCompetitionFeature_OrderByInput',
    '_CloudSettings_RelevanceOrderByInput',
]



# recursive CloudSettings types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CloudSettingsRelationFilter = TypedDict(
    'CloudSettingsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CloudSettingsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CloudSettingsInclude(TypedDict, total=False):
    """CloudSettings relational arguments"""
    company: Union[bool, 'CompanyArgsFromCloudSettings']


    

class CompanyIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSettingsRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSettingsRecursive1']
    plan: Union[bool, 'PlanArgsFromCloudSettingsRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive1']
    users: Union[bool, 'FindManyUserArgsFromCloudSettingsRecursive1']


class CompanyIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSettingsRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSettingsRecursive2']
    plan: Union[bool, 'PlanArgsFromCloudSettingsRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive2']
    users: Union[bool, 'FindManyUserArgsFromCloudSettingsRecursive2']


class CompanyIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSettingsRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSettingsRecursive3']
    plan: Union[bool, 'PlanArgsFromCloudSettingsRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive3']
    users: Union[bool, 'FindManyUserArgsFromCloudSettingsRecursive3']


class CompanyIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSettingsRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSettingsRecursive4']
    plan: Union[bool, 'PlanArgsFromCloudSettingsRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive4']
    users: Union[bool, 'FindManyUserArgsFromCloudSettingsRecursive4']


class CompanyIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class CompanyArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyCompanyArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive1']


class PlanIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive2']


class PlanIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive3']


class PlanIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive4']


class PlanIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class PlanArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyPlanArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive1']


class CloudSettingsIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive2']


class CloudSettingsIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive3']


class CloudSettingsIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive4']


class CloudSettingsIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class CloudSettingsArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyCloudSettingsArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSettingsRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSettingsRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive1']
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive1']


class UserIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSettingsRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSettingsRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive2']
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive2']


class UserIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSettingsRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSettingsRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive3']
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive3']


class UserIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSettingsRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSettingsRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSettingsRecursive4']
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive4']


class UserIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class UserArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyUserArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive1']


class DeviceIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive2']


class DeviceIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive3']


class DeviceIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSettingsRecursive4']


class DeviceIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class DeviceArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyDeviceArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    certificate: Union[bool, 'CertificateArgsFromCloudSettingsRecursive1']
    device: Union[bool, 'DeviceArgsFromCloudSettingsRecursive1']
    tester: Union[bool, 'UserArgsFromCloudSettingsRecursive1']


class TestResultIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    certificate: Union[bool, 'CertificateArgsFromCloudSettingsRecursive2']
    device: Union[bool, 'DeviceArgsFromCloudSettingsRecursive2']
    tester: Union[bool, 'UserArgsFromCloudSettingsRecursive2']


class TestResultIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    certificate: Union[bool, 'CertificateArgsFromCloudSettingsRecursive3']
    device: Union[bool, 'DeviceArgsFromCloudSettingsRecursive3']
    tester: Union[bool, 'UserArgsFromCloudSettingsRecursive3']


class TestResultIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    certificate: Union[bool, 'CertificateArgsFromCloudSettingsRecursive4']
    device: Union[bool, 'DeviceArgsFromCloudSettingsRecursive4']
    tester: Union[bool, 'UserArgsFromCloudSettingsRecursive4']


class TestResultIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class TestResultArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyTestResultArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    testResult: Union[bool, 'TestResultArgsFromCloudSettingsRecursive1']


class CertificateIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    testResult: Union[bool, 'TestResultArgsFromCloudSettingsRecursive2']


class CertificateIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    testResult: Union[bool, 'TestResultArgsFromCloudSettingsRecursive3']


class CertificateIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    testResult: Union[bool, 'TestResultArgsFromCloudSettingsRecursive4']


class CertificateIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class CertificateArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyCertificateArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive1']


class SessionIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive2']


class SessionIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive3']


class SessionIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive4']


class SessionIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class SessionArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManySessionArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive1']


class CloudSessionIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive2']


class CloudSessionIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive3']


class CloudSessionIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive4']


class CloudSessionIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class CloudSessionArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyCloudSessionArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive1']
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive1']


class TransactionIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive2']
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive2']


class TransactionIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive3']
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive3']


class TransactionIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""
    company: Union[bool, 'CompanyArgsFromCloudSettingsRecursive4']
    user: Union[bool, 'UserArgsFromCloudSettingsRecursive4']


class TransactionIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class TransactionArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyTransactionArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromCloudSettings(TypedDict, total=False):
    """Relational arguments for CloudSettings"""


class MobileNetworksIncludeFromCloudSettingsRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSettings"""


class MobileNetworksIncludeFromCloudSettingsRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSettings"""


class MobileNetworksIncludeFromCloudSettingsRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSettings"""


class MobileNetworksIncludeFromCloudSettingsRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSettings"""

    

class MobileNetworksArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    
    

class FindManyMobileNetworksArgsFromCloudSettings(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromCloudSettingsRecursive1(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromCloudSettingsRecursive2(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromCloudSettingsRecursive3(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromCloudSettingsRecursive4(TypedDict, total=False):
    """Arguments for CloudSettings"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyCloudSettingsArgs = FindManyCloudSettingsArgsFromCloudSettings
FindFirstCloudSettingsArgs = FindManyCloudSettingsArgsFromCloudSettings


    

class CloudSettingsWhereInput(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSettingsWhereInputRecursive1', List['CloudSettingsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CloudSettingsWhereInputRecursive1']
    OR: List['CloudSettingsWhereInputRecursive1']
    NOT: List['CloudSettingsWhereInputRecursive1']


class CloudSettingsWhereInputRecursive1(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSettingsWhereInputRecursive2', List['CloudSettingsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CloudSettingsWhereInputRecursive2']
    OR: List['CloudSettingsWhereInputRecursive2']
    NOT: List['CloudSettingsWhereInputRecursive2']


class CloudSettingsWhereInputRecursive2(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSettingsWhereInputRecursive3', List['CloudSettingsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CloudSettingsWhereInputRecursive3']
    OR: List['CloudSettingsWhereInputRecursive3']
    NOT: List['CloudSettingsWhereInputRecursive3']


class CloudSettingsWhereInputRecursive3(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanFilter']
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSettingsWhereInputRecursive4', List['CloudSettingsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CloudSettingsWhereInputRecursive4']
    OR: List['CloudSettingsWhereInputRecursive4']
    NOT: List['CloudSettingsWhereInputRecursive4']


class CloudSettingsWhereInputRecursive4(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanFilter']
    company: 'CompanyRelationFilter'



# aggregate CloudSettings types


    

class CloudSettingsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CloudSettingsScalarWhereWithAggregatesInputRecursive1']
    OR: List['CloudSettingsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CloudSettingsScalarWhereWithAggregatesInputRecursive1']


class CloudSettingsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CloudSettingsScalarWhereWithAggregatesInputRecursive2']
    OR: List['CloudSettingsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CloudSettingsScalarWhereWithAggregatesInputRecursive2']


class CloudSettingsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CloudSettingsScalarWhereWithAggregatesInputRecursive3']
    OR: List['CloudSettingsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CloudSettingsScalarWhereWithAggregatesInputRecursive3']


class CloudSettingsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanWithAggregatesFilter']

    AND: List['CloudSettingsScalarWhereWithAggregatesInputRecursive4']
    OR: List['CloudSettingsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CloudSettingsScalarWhereWithAggregatesInputRecursive4']


class CloudSettingsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """CloudSettings arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    testingCompetitionFeature: Union[_bool, 'types.BooleanWithAggregatesFilter']



class CloudSettingsGroupByOutput(TypedDict, total=False):
    id: _str
    companyId: _str
    testingCompetitionFeature: _bool
    _sum: 'CloudSettingsSumAggregateOutput'
    _avg: 'CloudSettingsAvgAggregateOutput'
    _min: 'CloudSettingsMinAggregateOutput'
    _max: 'CloudSettingsMaxAggregateOutput'
    _count: 'CloudSettingsCountAggregateOutput'


class CloudSettingsAvgAggregateOutput(TypedDict, total=False):
    """CloudSettings output for aggregating averages"""


class CloudSettingsSumAggregateOutput(TypedDict, total=False):
    """CloudSettings output for aggregating sums"""


class CloudSettingsScalarAggregateOutput(TypedDict, total=False):
    """CloudSettings output including scalar fields"""
    id: _str
    companyId: _str
    testingCompetitionFeature: _bool


CloudSettingsMinAggregateOutput = CloudSettingsScalarAggregateOutput
CloudSettingsMaxAggregateOutput = CloudSettingsScalarAggregateOutput


class CloudSettingsMaxAggregateInput(TypedDict, total=False):
    """CloudSettings input for aggregating by max"""
    id: bool
    companyId: bool
    testingCompetitionFeature: bool


class CloudSettingsMinAggregateInput(TypedDict, total=False):
    """CloudSettings input for aggregating by min"""
    id: bool
    companyId: bool
    testingCompetitionFeature: bool


class CloudSettingsNumberAggregateInput(TypedDict, total=False):
    """CloudSettings input for aggregating numbers"""


CloudSettingsAvgAggregateInput = CloudSettingsNumberAggregateInput
CloudSettingsSumAggregateInput = CloudSettingsNumberAggregateInput


CloudSettingsCountAggregateInput = TypedDict(
    'CloudSettingsCountAggregateInput',
    {
        'id': bool,
        'companyId': bool,
        'testingCompetitionFeature': bool,
        '_all': bool,
    },
    total=False,
)

CloudSettingsCountAggregateOutput = TypedDict(
    'CloudSettingsCountAggregateOutput',
    {
        'id': int,
        'companyId': int,
        'testingCompetitionFeature': int,
        '_all': int,
    },
    total=False,
)


CloudSettingsKeys = Literal[
    'id',
    'companyId',
    'testingCompetitionFeature',
    'company',
]
CloudSettingsScalarFieldKeys = Literal[
    'id',
    'companyId',
    'testingCompetitionFeature',
]
CloudSettingsScalarFieldKeysT = TypeVar('CloudSettingsScalarFieldKeysT', bound=CloudSettingsScalarFieldKeys)

CloudSettingsRelationalFieldKeys = Literal[
        'company',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    companyId: _str
    createdAt: datetime.datetime
    image: Optional[_str]
    userRole: 'enums.UserRole'
    tag: Optional[_str]
    cloudSessions: 'CloudSessionCreateManyNestedWithoutRelationsInput'
    sessions: 'SessionCreateManyNestedWithoutRelationsInput'
    testResults: 'TestResultCreateManyNestedWithoutRelationsInput'
    transactions: 'TransactionCreateManyNestedWithoutRelationsInput'
    company: 'CompanyCreateNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    companyId: _str
    createdAt: datetime.datetime
    image: Optional[_str]
    userRole: 'enums.UserRole'
    tag: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str
    name: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    password: _str
    name: _str
    createdAt: datetime.datetime
    image: Optional[_str]
    userRole: 'enums.UserRole'
    tag: Optional[_str]
    cloudSessions: 'CloudSessionUpdateManyWithoutRelationsInput'
    sessions: 'SessionUpdateManyWithoutRelationsInput'
    testResults: 'TestResultUpdateManyWithoutRelationsInput'
    transactions: 'TransactionUpdateManyWithoutRelationsInput'
    company: 'CompanyUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    password: _str
    name: _str
    createdAt: datetime.datetime
    image: Optional[_str]
    userRole: 'enums.UserRole'
    tag: Optional[_str]


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_companyId_OrderByInput = TypedDict(
    '_User_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_image_OrderByInput = TypedDict(
    '_User_image_OrderByInput',
    {
        'image': 'SortOrder',
    },
    total=True
)

_User_userRole_OrderByInput = TypedDict(
    '_User_userRole_OrderByInput',
    {
        'userRole': 'SortOrder',
    },
    total=True
)

_User_tag_OrderByInput = TypedDict(
    '_User_tag_OrderByInput',
    {
        'tag': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
    '_User_companyId_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_image_OrderByInput',
    '_User_userRole_OrderByInput',
    '_User_tag_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromUser']
    sessions: Union[bool, 'FindManySessionArgsFromUser']
    testResults: Union[bool, 'FindManyTestResultArgsFromUser']
    transactions: Union[bool, 'FindManyTransactionArgsFromUser']
    company: Union[bool, 'CompanyArgsFromUser']


    

class CompanyIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromUserRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromUserRecursive1']
    plan: Union[bool, 'PlanArgsFromUserRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive1']
    users: Union[bool, 'FindManyUserArgsFromUserRecursive1']


class CompanyIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromUserRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromUserRecursive2']
    plan: Union[bool, 'PlanArgsFromUserRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive2']
    users: Union[bool, 'FindManyUserArgsFromUserRecursive2']


class CompanyIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromUserRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromUserRecursive3']
    plan: Union[bool, 'PlanArgsFromUserRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive3']
    users: Union[bool, 'FindManyUserArgsFromUserRecursive3']


class CompanyIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromUserRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromUserRecursive4']
    plan: Union[bool, 'PlanArgsFromUserRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive4']
    users: Union[bool, 'FindManyUserArgsFromUserRecursive4']


class CompanyIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCompanyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive1']


class PlanIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive2']


class PlanIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive3']


class PlanIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive4']


class PlanIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class PlanArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyPlanArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive1']


class CloudSettingsIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive2']


class CloudSettingsIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive3']


class CloudSettingsIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive4']


class CloudSettingsIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CloudSettingsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCloudSettingsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromUserRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive1']
    company: Union[bool, 'CompanyArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromUserRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive2']
    company: Union[bool, 'CompanyArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromUserRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive3']
    company: Union[bool, 'CompanyArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromUserRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromUserRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromUserRecursive4']
    company: Union[bool, 'CompanyArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive1']


class DeviceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive2']


class DeviceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive3']


class DeviceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromUserRecursive4']


class DeviceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class DeviceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyDeviceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    certificate: Union[bool, 'CertificateArgsFromUserRecursive1']
    device: Union[bool, 'DeviceArgsFromUserRecursive1']
    tester: Union[bool, 'UserArgsFromUserRecursive1']


class TestResultIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    certificate: Union[bool, 'CertificateArgsFromUserRecursive2']
    device: Union[bool, 'DeviceArgsFromUserRecursive2']
    tester: Union[bool, 'UserArgsFromUserRecursive2']


class TestResultIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    certificate: Union[bool, 'CertificateArgsFromUserRecursive3']
    device: Union[bool, 'DeviceArgsFromUserRecursive3']
    tester: Union[bool, 'UserArgsFromUserRecursive3']


class TestResultIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    certificate: Union[bool, 'CertificateArgsFromUserRecursive4']
    device: Union[bool, 'DeviceArgsFromUserRecursive4']
    tester: Union[bool, 'UserArgsFromUserRecursive4']


class TestResultIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TestResultArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTestResultArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    testResult: Union[bool, 'TestResultArgsFromUserRecursive1']


class CertificateIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    testResult: Union[bool, 'TestResultArgsFromUserRecursive2']


class CertificateIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    testResult: Union[bool, 'TestResultArgsFromUserRecursive3']


class CertificateIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    testResult: Union[bool, 'TestResultArgsFromUserRecursive4']


class CertificateIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CertificateArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCertificateArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class SessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class SessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class SessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class SessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class SessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManySessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive1']


class CloudSessionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive2']


class CloudSessionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive3']


class CloudSessionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUserRecursive4']


class CloudSessionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class CloudSessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyCloudSessionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive1']
    user: Union[bool, 'UserArgsFromUserRecursive1']


class TransactionIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive2']
    user: Union[bool, 'UserArgsFromUserRecursive2']


class TransactionIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive3']
    user: Union[bool, 'UserArgsFromUserRecursive3']


class TransactionIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    company: Union[bool, 'CompanyArgsFromUserRecursive4']
    user: Union[bool, 'UserArgsFromUserRecursive4']


class TransactionIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class TransactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyTransactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class MobileNetworksIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class MobileNetworksIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class MobileNetworksIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class MobileNetworksIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MobileNetworksArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMobileNetworksArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    userRole: 'enums.UserRole'
    tag: Union[None, _str, 'types.StringFilter']
    cloudSessions: 'CloudSessionListRelationFilter'
    sessions: 'SessionListRelationFilter'
    testResults: 'TestResultListRelationFilter'
    transactions: 'TransactionListRelationFilter'
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    userRole: 'enums.UserRole'
    tag: Union[None, _str, 'types.StringFilter']
    cloudSessions: 'CloudSessionListRelationFilter'
    sessions: 'SessionListRelationFilter'
    testResults: 'TestResultListRelationFilter'
    transactions: 'TransactionListRelationFilter'
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    userRole: 'enums.UserRole'
    tag: Union[None, _str, 'types.StringFilter']
    cloudSessions: 'CloudSessionListRelationFilter'
    sessions: 'SessionListRelationFilter'
    testResults: 'TestResultListRelationFilter'
    transactions: 'TransactionListRelationFilter'
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    userRole: 'enums.UserRole'
    tag: Union[None, _str, 'types.StringFilter']
    cloudSessions: 'CloudSessionListRelationFilter'
    sessions: 'SessionListRelationFilter'
    testResults: 'TestResultListRelationFilter'
    transactions: 'TransactionListRelationFilter'
    company: 'CompanyRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    image: Union[None, _str, 'types.StringFilter']
    userRole: 'enums.UserRole'
    tag: Union[None, _str, 'types.StringFilter']
    cloudSessions: 'CloudSessionListRelationFilter'
    sessions: 'SessionListRelationFilter'
    testResults: 'TestResultListRelationFilter'
    transactions: 'TransactionListRelationFilter'
    company: 'CompanyRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    userRole: 'enums.UserRole'
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    userRole: 'enums.UserRole'
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    userRole: 'enums.UserRole'
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    userRole: 'enums.UserRole'
    tag: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    image: Union[_str, 'types.StringWithAggregatesFilter']
    userRole: 'enums.UserRole'
    tag: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    password: _str
    name: _str
    companyId: _str
    createdAt: datetime.datetime
    image: _str
    userRole: 'enums.UserRole'
    tag: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    password: _str
    name: _str
    companyId: _str
    createdAt: datetime.datetime
    image: _str
    userRole: 'enums.UserRole'
    tag: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    password: bool
    name: bool
    companyId: bool
    createdAt: bool
    image: bool
    userRole: bool
    tag: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    password: bool
    name: bool
    companyId: bool
    createdAt: bool
    image: bool
    userRole: bool
    tag: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'password': bool,
        'name': bool,
        'companyId': bool,
        'createdAt': bool,
        'image': bool,
        'userRole': bool,
        'tag': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'password': int,
        'name': int,
        'companyId': int,
        'createdAt': int,
        'image': int,
        'userRole': int,
        'tag': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'companyId',
    'createdAt',
    'image',
    'userRole',
    'tag',
    'cloudSessions',
    'sessions',
    'testResults',
    'transactions',
    'company',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'password',
    'name',
    'companyId',
    'createdAt',
    'image',
    'userRole',
    'tag',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'cloudSessions',
        'sessions',
        'testResults',
        'transactions',
        'company',
    ]

# Device types

class DeviceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Device create method"""
    id: _str
    companyId: _str
    model: _str
    createdAt: datetime.datetime
    brand: _str
    code: _str
    simSlots: _int
    batteryTech: _str
    cpu: _str
    voltage: _str
    serial: _str
    mAh: _str
    company: 'CompanyCreateNestedWithoutRelationsInput'
    testResults: 'TestResultCreateManyNestedWithoutRelationsInput'


class DeviceCreateInput(DeviceOptionalCreateInput):
    """Required arguments to the Device create method"""
    imei: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DeviceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Device create method, without relations"""
    id: _str
    companyId: _str
    model: _str
    createdAt: datetime.datetime
    brand: _str
    code: _str
    simSlots: _int
    batteryTech: _str
    cpu: _str
    voltage: _str
    serial: _str
    mAh: _str


class DeviceCreateWithoutRelationsInput(DeviceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Device create method, without relations"""
    imei: _str

class DeviceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DeviceCreateWithoutRelationsInput'
    where: 'DeviceWhereUniqueInput'

class DeviceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DeviceCreateWithoutRelationsInput'
    connect: 'DeviceWhereUniqueInput'
    connect_or_create: 'DeviceConnectOrCreateWithoutRelationsInput'


class DeviceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DeviceCreateWithoutRelationsInput', List['DeviceCreateWithoutRelationsInput']]
    connect: Union['DeviceWhereUniqueInput', List['DeviceWhereUniqueInput']]
    connect_or_create: Union['DeviceConnectOrCreateWithoutRelationsInput', List['DeviceConnectOrCreateWithoutRelationsInput']]

_DeviceWhereUnique_id_Input = TypedDict(
    '_DeviceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_DeviceCompoundimei_companyIdKeyInner = TypedDict(
    '_DeviceCompoundimei_companyIdKeyInner',
    {
        'imei': '_str',
        'companyId': '_str',
    },
    total=True
)

_DeviceCompoundimei_companyIdKey = TypedDict(
    '_DeviceCompoundimei_companyIdKey',
    {
        'imei_companyId': '_DeviceCompoundimei_companyIdKeyInner',
    },
    total=True
)

DeviceWhereUniqueInput = Union[
    '_DeviceWhereUnique_id_Input',
    '_DeviceCompoundimei_companyIdKey',
]


class DeviceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    imei: _str
    model: _str
    createdAt: datetime.datetime
    brand: _str
    code: _str
    simSlots: Union[AtomicIntInput, _int]
    batteryTech: _str
    cpu: _str
    voltage: _str
    serial: _str
    mAh: _str
    company: 'CompanyUpdateOneWithoutRelationsInput'
    testResults: 'TestResultUpdateManyWithoutRelationsInput'


class DeviceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    imei: _str
    model: _str
    createdAt: datetime.datetime
    brand: _str
    code: _str
    simSlots: Union[AtomicIntInput, _int]
    batteryTech: _str
    cpu: _str
    voltage: _str
    serial: _str
    mAh: _str


class DeviceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DeviceCreateWithoutRelationsInput']
    connect: List['DeviceWhereUniqueInput']
    connect_or_create: List['DeviceConnectOrCreateWithoutRelationsInput']
    set: List['DeviceWhereUniqueInput']
    disconnect: List['DeviceWhereUniqueInput']
    delete: List['DeviceWhereUniqueInput']

    # TODO
    # update: List['DeviceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DeviceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DeviceScalarWhereInput']
    # upsert: List['DeviceUpserteWithWhereUniqueWithoutRelationsInput']


class DeviceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DeviceCreateWithoutRelationsInput'
    connect: 'DeviceWhereUniqueInput'
    connect_or_create: 'DeviceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DeviceUpdateInput'
    # upsert: 'DeviceUpsertWithoutRelationsInput'


class DeviceUpsertInput(TypedDict):
    create: 'DeviceCreateInput'
    update: 'DeviceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Device_id_OrderByInput = TypedDict(
    '_Device_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Device_imei_OrderByInput = TypedDict(
    '_Device_imei_OrderByInput',
    {
        'imei': 'SortOrder',
    },
    total=True
)

_Device_companyId_OrderByInput = TypedDict(
    '_Device_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_Device_model_OrderByInput = TypedDict(
    '_Device_model_OrderByInput',
    {
        'model': 'SortOrder',
    },
    total=True
)

_Device_createdAt_OrderByInput = TypedDict(
    '_Device_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Device_brand_OrderByInput = TypedDict(
    '_Device_brand_OrderByInput',
    {
        'brand': 'SortOrder',
    },
    total=True
)

_Device_code_OrderByInput = TypedDict(
    '_Device_code_OrderByInput',
    {
        'code': 'SortOrder',
    },
    total=True
)

_Device_simSlots_OrderByInput = TypedDict(
    '_Device_simSlots_OrderByInput',
    {
        'simSlots': 'SortOrder',
    },
    total=True
)

_Device_batteryTech_OrderByInput = TypedDict(
    '_Device_batteryTech_OrderByInput',
    {
        'batteryTech': 'SortOrder',
    },
    total=True
)

_Device_cpu_OrderByInput = TypedDict(
    '_Device_cpu_OrderByInput',
    {
        'cpu': 'SortOrder',
    },
    total=True
)

_Device_voltage_OrderByInput = TypedDict(
    '_Device_voltage_OrderByInput',
    {
        'voltage': 'SortOrder',
    },
    total=True
)

_Device_serial_OrderByInput = TypedDict(
    '_Device_serial_OrderByInput',
    {
        'serial': 'SortOrder',
    },
    total=True
)

_Device_mAh_OrderByInput = TypedDict(
    '_Device_mAh_OrderByInput',
    {
        'mAh': 'SortOrder',
    },
    total=True
)

_Device_RelevanceInner = TypedDict(
    '_Device_RelevanceInner',
    {
        'fields': 'List[DeviceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Device_RelevanceOrderByInput = TypedDict(
    '_Device_RelevanceOrderByInput',
    {
        '_relevance': '_Device_RelevanceInner',
    },
    total=True
)

DeviceOrderByInput = Union[
    '_Device_id_OrderByInput',
    '_Device_imei_OrderByInput',
    '_Device_companyId_OrderByInput',
    '_Device_model_OrderByInput',
    '_Device_createdAt_OrderByInput',
    '_Device_brand_OrderByInput',
    '_Device_code_OrderByInput',
    '_Device_simSlots_OrderByInput',
    '_Device_batteryTech_OrderByInput',
    '_Device_cpu_OrderByInput',
    '_Device_voltage_OrderByInput',
    '_Device_serial_OrderByInput',
    '_Device_mAh_OrderByInput',
    '_Device_RelevanceOrderByInput',
]



# recursive Device types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

DeviceRelationFilter = TypedDict(
    'DeviceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class DeviceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class DeviceInclude(TypedDict, total=False):
    """Device relational arguments"""
    company: Union[bool, 'CompanyArgsFromDevice']
    testResults: Union[bool, 'FindManyTestResultArgsFromDevice']


    

class CompanyIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromDeviceRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromDeviceRecursive1']
    plan: Union[bool, 'PlanArgsFromDeviceRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive1']
    users: Union[bool, 'FindManyUserArgsFromDeviceRecursive1']


class CompanyIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromDeviceRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromDeviceRecursive2']
    plan: Union[bool, 'PlanArgsFromDeviceRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive2']
    users: Union[bool, 'FindManyUserArgsFromDeviceRecursive2']


class CompanyIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromDeviceRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromDeviceRecursive3']
    plan: Union[bool, 'PlanArgsFromDeviceRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive3']
    users: Union[bool, 'FindManyUserArgsFromDeviceRecursive3']


class CompanyIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromDeviceRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromDeviceRecursive4']
    plan: Union[bool, 'PlanArgsFromDeviceRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive4']
    users: Union[bool, 'FindManyUserArgsFromDeviceRecursive4']


class CompanyIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class CompanyArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyCompanyArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive1']


class PlanIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive2']


class PlanIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive3']


class PlanIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive4']


class PlanIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class PlanArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyPlanArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive1']


class CloudSettingsIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive2']


class CloudSettingsIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive3']


class CloudSettingsIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive4']


class CloudSettingsIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class CloudSettingsArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyCloudSettingsArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromDeviceRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromDeviceRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive1']
    company: Union[bool, 'CompanyArgsFromDeviceRecursive1']


class UserIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromDeviceRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromDeviceRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive2']
    company: Union[bool, 'CompanyArgsFromDeviceRecursive2']


class UserIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromDeviceRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromDeviceRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive3']
    company: Union[bool, 'CompanyArgsFromDeviceRecursive3']


class UserIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromDeviceRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromDeviceRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromDeviceRecursive4']
    company: Union[bool, 'CompanyArgsFromDeviceRecursive4']


class UserIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class UserArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyUserArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive1']


class DeviceIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive2']


class DeviceIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive3']


class DeviceIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromDeviceRecursive4']


class DeviceIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class DeviceArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyDeviceArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    certificate: Union[bool, 'CertificateArgsFromDeviceRecursive1']
    device: Union[bool, 'DeviceArgsFromDeviceRecursive1']
    tester: Union[bool, 'UserArgsFromDeviceRecursive1']


class TestResultIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    certificate: Union[bool, 'CertificateArgsFromDeviceRecursive2']
    device: Union[bool, 'DeviceArgsFromDeviceRecursive2']
    tester: Union[bool, 'UserArgsFromDeviceRecursive2']


class TestResultIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    certificate: Union[bool, 'CertificateArgsFromDeviceRecursive3']
    device: Union[bool, 'DeviceArgsFromDeviceRecursive3']
    tester: Union[bool, 'UserArgsFromDeviceRecursive3']


class TestResultIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    certificate: Union[bool, 'CertificateArgsFromDeviceRecursive4']
    device: Union[bool, 'DeviceArgsFromDeviceRecursive4']
    tester: Union[bool, 'UserArgsFromDeviceRecursive4']


class TestResultIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class TestResultArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyTestResultArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    testResult: Union[bool, 'TestResultArgsFromDeviceRecursive1']


class CertificateIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    testResult: Union[bool, 'TestResultArgsFromDeviceRecursive2']


class CertificateIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    testResult: Union[bool, 'TestResultArgsFromDeviceRecursive3']


class CertificateIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    testResult: Union[bool, 'TestResultArgsFromDeviceRecursive4']


class CertificateIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class CertificateArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyCertificateArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive1']


class SessionIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive2']


class SessionIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive3']


class SessionIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive4']


class SessionIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class SessionArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManySessionArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive1']


class CloudSessionIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive2']


class CloudSessionIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive3']


class CloudSessionIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    user: Union[bool, 'UserArgsFromDeviceRecursive4']


class CloudSessionIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class CloudSessionArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyCloudSessionArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive1']
    user: Union[bool, 'UserArgsFromDeviceRecursive1']


class TransactionIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive2']
    user: Union[bool, 'UserArgsFromDeviceRecursive2']


class TransactionIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive3']
    user: Union[bool, 'UserArgsFromDeviceRecursive3']


class TransactionIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""
    company: Union[bool, 'CompanyArgsFromDeviceRecursive4']
    user: Union[bool, 'UserArgsFromDeviceRecursive4']


class TransactionIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class TransactionArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyTransactionArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromDevice(TypedDict, total=False):
    """Relational arguments for Device"""


class MobileNetworksIncludeFromDeviceRecursive1(TypedDict, total=False):
    """Relational arguments for Device"""


class MobileNetworksIncludeFromDeviceRecursive2(TypedDict, total=False):
    """Relational arguments for Device"""


class MobileNetworksIncludeFromDeviceRecursive3(TypedDict, total=False):
    """Relational arguments for Device"""


class MobileNetworksIncludeFromDeviceRecursive4(TypedDict, total=False):
    """Relational arguments for Device"""

    

class MobileNetworksArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    
    

class FindManyMobileNetworksArgsFromDevice(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromDeviceRecursive1(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromDeviceRecursive2(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromDeviceRecursive3(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromDeviceRecursive4(TypedDict, total=False):
    """Arguments for Device"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyDeviceArgs = FindManyDeviceArgsFromDevice
FindFirstDeviceArgs = FindManyDeviceArgsFromDevice


    

class DeviceWhereInput(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    imei: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    brand: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    simSlots: Union[_int, 'types.IntFilter']
    batteryTech: Union[_str, 'types.StringFilter']
    cpu: Union[_str, 'types.StringFilter']
    voltage: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    mAh: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    testResults: 'TestResultListRelationFilter'

    # should be noted that AND and NOT should be Union['DeviceWhereInputRecursive1', List['DeviceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['DeviceWhereInputRecursive1']
    OR: List['DeviceWhereInputRecursive1']
    NOT: List['DeviceWhereInputRecursive1']


class DeviceWhereInputRecursive1(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    imei: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    brand: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    simSlots: Union[_int, 'types.IntFilter']
    batteryTech: Union[_str, 'types.StringFilter']
    cpu: Union[_str, 'types.StringFilter']
    voltage: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    mAh: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    testResults: 'TestResultListRelationFilter'

    # should be noted that AND and NOT should be Union['DeviceWhereInputRecursive2', List['DeviceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['DeviceWhereInputRecursive2']
    OR: List['DeviceWhereInputRecursive2']
    NOT: List['DeviceWhereInputRecursive2']


class DeviceWhereInputRecursive2(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    imei: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    brand: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    simSlots: Union[_int, 'types.IntFilter']
    batteryTech: Union[_str, 'types.StringFilter']
    cpu: Union[_str, 'types.StringFilter']
    voltage: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    mAh: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    testResults: 'TestResultListRelationFilter'

    # should be noted that AND and NOT should be Union['DeviceWhereInputRecursive3', List['DeviceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['DeviceWhereInputRecursive3']
    OR: List['DeviceWhereInputRecursive3']
    NOT: List['DeviceWhereInputRecursive3']


class DeviceWhereInputRecursive3(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    imei: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    brand: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    simSlots: Union[_int, 'types.IntFilter']
    batteryTech: Union[_str, 'types.StringFilter']
    cpu: Union[_str, 'types.StringFilter']
    voltage: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    mAh: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    testResults: 'TestResultListRelationFilter'

    # should be noted that AND and NOT should be Union['DeviceWhereInputRecursive4', List['DeviceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['DeviceWhereInputRecursive4']
    OR: List['DeviceWhereInputRecursive4']
    NOT: List['DeviceWhereInputRecursive4']


class DeviceWhereInputRecursive4(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    imei: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    model: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    brand: Union[_str, 'types.StringFilter']
    code: Union[_str, 'types.StringFilter']
    simSlots: Union[_int, 'types.IntFilter']
    batteryTech: Union[_str, 'types.StringFilter']
    cpu: Union[_str, 'types.StringFilter']
    voltage: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    mAh: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    testResults: 'TestResultListRelationFilter'



# aggregate Device types


    

class DeviceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    brand: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    simSlots: Union[_int, 'types.IntWithAggregatesFilter']
    batteryTech: Union[_str, 'types.StringWithAggregatesFilter']
    cpu: Union[_str, 'types.StringWithAggregatesFilter']
    voltage: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    mAh: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DeviceScalarWhereWithAggregatesInputRecursive1']
    OR: List['DeviceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['DeviceScalarWhereWithAggregatesInputRecursive1']


class DeviceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    brand: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    simSlots: Union[_int, 'types.IntWithAggregatesFilter']
    batteryTech: Union[_str, 'types.StringWithAggregatesFilter']
    cpu: Union[_str, 'types.StringWithAggregatesFilter']
    voltage: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    mAh: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DeviceScalarWhereWithAggregatesInputRecursive2']
    OR: List['DeviceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['DeviceScalarWhereWithAggregatesInputRecursive2']


class DeviceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    brand: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    simSlots: Union[_int, 'types.IntWithAggregatesFilter']
    batteryTech: Union[_str, 'types.StringWithAggregatesFilter']
    cpu: Union[_str, 'types.StringWithAggregatesFilter']
    voltage: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    mAh: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DeviceScalarWhereWithAggregatesInputRecursive3']
    OR: List['DeviceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['DeviceScalarWhereWithAggregatesInputRecursive3']


class DeviceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    brand: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    simSlots: Union[_int, 'types.IntWithAggregatesFilter']
    batteryTech: Union[_str, 'types.StringWithAggregatesFilter']
    cpu: Union[_str, 'types.StringWithAggregatesFilter']
    voltage: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    mAh: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DeviceScalarWhereWithAggregatesInputRecursive4']
    OR: List['DeviceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['DeviceScalarWhereWithAggregatesInputRecursive4']


class DeviceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Device arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    model: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    brand: Union[_str, 'types.StringWithAggregatesFilter']
    code: Union[_str, 'types.StringWithAggregatesFilter']
    simSlots: Union[_int, 'types.IntWithAggregatesFilter']
    batteryTech: Union[_str, 'types.StringWithAggregatesFilter']
    cpu: Union[_str, 'types.StringWithAggregatesFilter']
    voltage: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    mAh: Union[_str, 'types.StringWithAggregatesFilter']



class DeviceGroupByOutput(TypedDict, total=False):
    id: _str
    imei: _str
    companyId: _str
    model: _str
    createdAt: datetime.datetime
    brand: _str
    code: _str
    simSlots: _int
    batteryTech: _str
    cpu: _str
    voltage: _str
    serial: _str
    mAh: _str
    _sum: 'DeviceSumAggregateOutput'
    _avg: 'DeviceAvgAggregateOutput'
    _min: 'DeviceMinAggregateOutput'
    _max: 'DeviceMaxAggregateOutput'
    _count: 'DeviceCountAggregateOutput'


class DeviceAvgAggregateOutput(TypedDict, total=False):
    """Device output for aggregating averages"""
    simSlots: float


class DeviceSumAggregateOutput(TypedDict, total=False):
    """Device output for aggregating sums"""
    simSlots: _int


class DeviceScalarAggregateOutput(TypedDict, total=False):
    """Device output including scalar fields"""
    id: _str
    imei: _str
    companyId: _str
    model: _str
    createdAt: datetime.datetime
    brand: _str
    code: _str
    simSlots: _int
    batteryTech: _str
    cpu: _str
    voltage: _str
    serial: _str
    mAh: _str


DeviceMinAggregateOutput = DeviceScalarAggregateOutput
DeviceMaxAggregateOutput = DeviceScalarAggregateOutput


class DeviceMaxAggregateInput(TypedDict, total=False):
    """Device input for aggregating by max"""
    id: bool
    imei: bool
    companyId: bool
    model: bool
    createdAt: bool
    brand: bool
    code: bool
    simSlots: bool
    batteryTech: bool
    cpu: bool
    voltage: bool
    serial: bool
    mAh: bool


class DeviceMinAggregateInput(TypedDict, total=False):
    """Device input for aggregating by min"""
    id: bool
    imei: bool
    companyId: bool
    model: bool
    createdAt: bool
    brand: bool
    code: bool
    simSlots: bool
    batteryTech: bool
    cpu: bool
    voltage: bool
    serial: bool
    mAh: bool


class DeviceNumberAggregateInput(TypedDict, total=False):
    """Device input for aggregating numbers"""
    simSlots: bool


DeviceAvgAggregateInput = DeviceNumberAggregateInput
DeviceSumAggregateInput = DeviceNumberAggregateInput


DeviceCountAggregateInput = TypedDict(
    'DeviceCountAggregateInput',
    {
        'id': bool,
        'imei': bool,
        'companyId': bool,
        'model': bool,
        'createdAt': bool,
        'brand': bool,
        'code': bool,
        'simSlots': bool,
        'batteryTech': bool,
        'cpu': bool,
        'voltage': bool,
        'serial': bool,
        'mAh': bool,
        '_all': bool,
    },
    total=False,
)

DeviceCountAggregateOutput = TypedDict(
    'DeviceCountAggregateOutput',
    {
        'id': int,
        'imei': int,
        'companyId': int,
        'model': int,
        'createdAt': int,
        'brand': int,
        'code': int,
        'simSlots': int,
        'batteryTech': int,
        'cpu': int,
        'voltage': int,
        'serial': int,
        'mAh': int,
        '_all': int,
    },
    total=False,
)


DeviceKeys = Literal[
    'id',
    'imei',
    'companyId',
    'model',
    'createdAt',
    'brand',
    'code',
    'simSlots',
    'batteryTech',
    'cpu',
    'voltage',
    'serial',
    'mAh',
    'company',
    'testResults',
]
DeviceScalarFieldKeys = Literal[
    'id',
    'imei',
    'companyId',
    'model',
    'createdAt',
    'brand',
    'code',
    'simSlots',
    'batteryTech',
    'cpu',
    'voltage',
    'serial',
    'mAh',
]
DeviceScalarFieldKeysT = TypeVar('DeviceScalarFieldKeysT', bound=DeviceScalarFieldKeys)

DeviceRelationalFieldKeys = Literal[
        'company',
        'testResults',
    ]

# TestResult types

class TestResultOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the TestResult create method"""
    id: _str
    testerId: _str
    deviceId: _str
    status: _bool
    time: datetime.datetime
    batteryLife: _str
    cycleCount: _int
    frp: _bool
    imei: _str
    knox: _bool
    mdm: _bool
    osVersion: _str
    serial: _str
    uid: _str
    grade: _str
    carrier: _str
    storage: _str
    modelName: _str
    frontCameraImage: Optional[_str]
    rearCameraImage: Optional[_str]
    telephotoImage: Optional[_str]
    ultrawideImage: Optional[_str]
    ram: _str
    certificate: 'CertificateCreateNestedWithoutRelationsInput'
    device: 'DeviceCreateNestedWithoutRelationsInput'
    tester: 'UserCreateNestedWithoutRelationsInput'


class TestResultCreateInput(TestResultOptionalCreateInput):
    """Required arguments to the TestResult create method"""
    result: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TestResultOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the TestResult create method, without relations"""
    id: _str
    testerId: _str
    deviceId: _str
    status: _bool
    time: datetime.datetime
    batteryLife: _str
    cycleCount: _int
    frp: _bool
    imei: _str
    knox: _bool
    mdm: _bool
    osVersion: _str
    serial: _str
    uid: _str
    grade: _str
    carrier: _str
    storage: _str
    modelName: _str
    frontCameraImage: Optional[_str]
    rearCameraImage: Optional[_str]
    telephotoImage: Optional[_str]
    ultrawideImage: Optional[_str]
    ram: _str


class TestResultCreateWithoutRelationsInput(TestResultOptionalCreateWithoutRelationsInput):
    """Required arguments to the TestResult create method, without relations"""
    result: _str

class TestResultConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TestResultCreateWithoutRelationsInput'
    where: 'TestResultWhereUniqueInput'

class TestResultCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TestResultCreateWithoutRelationsInput'
    connect: 'TestResultWhereUniqueInput'
    connect_or_create: 'TestResultConnectOrCreateWithoutRelationsInput'


class TestResultCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TestResultCreateWithoutRelationsInput', List['TestResultCreateWithoutRelationsInput']]
    connect: Union['TestResultWhereUniqueInput', List['TestResultWhereUniqueInput']]
    connect_or_create: Union['TestResultConnectOrCreateWithoutRelationsInput', List['TestResultConnectOrCreateWithoutRelationsInput']]

_TestResultWhereUnique_id_Input = TypedDict(
    '_TestResultWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

TestResultWhereUniqueInput = _TestResultWhereUnique_id_Input


class TestResultUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    result: _str
    status: _bool
    time: datetime.datetime
    batteryLife: _str
    cycleCount: Union[AtomicIntInput, _int]
    frp: _bool
    imei: _str
    knox: _bool
    mdm: _bool
    osVersion: _str
    serial: _str
    uid: _str
    grade: _str
    carrier: _str
    storage: _str
    modelName: _str
    frontCameraImage: Optional[_str]
    rearCameraImage: Optional[_str]
    telephotoImage: Optional[_str]
    ultrawideImage: Optional[_str]
    ram: _str
    certificate: 'CertificateUpdateOneWithoutRelationsInput'
    device: 'DeviceUpdateOneWithoutRelationsInput'
    tester: 'UserUpdateOneWithoutRelationsInput'


class TestResultUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    result: _str
    status: _bool
    time: datetime.datetime
    batteryLife: _str
    cycleCount: Union[AtomicIntInput, _int]
    frp: _bool
    imei: _str
    knox: _bool
    mdm: _bool
    osVersion: _str
    serial: _str
    uid: _str
    grade: _str
    carrier: _str
    storage: _str
    modelName: _str
    frontCameraImage: Optional[_str]
    rearCameraImage: Optional[_str]
    telephotoImage: Optional[_str]
    ultrawideImage: Optional[_str]
    ram: _str


class TestResultUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TestResultCreateWithoutRelationsInput']
    connect: List['TestResultWhereUniqueInput']
    connect_or_create: List['TestResultConnectOrCreateWithoutRelationsInput']
    set: List['TestResultWhereUniqueInput']
    disconnect: List['TestResultWhereUniqueInput']
    delete: List['TestResultWhereUniqueInput']

    # TODO
    # update: List['TestResultUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TestResultUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TestResultScalarWhereInput']
    # upsert: List['TestResultUpserteWithWhereUniqueWithoutRelationsInput']


class TestResultUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TestResultCreateWithoutRelationsInput'
    connect: 'TestResultWhereUniqueInput'
    connect_or_create: 'TestResultConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TestResultUpdateInput'
    # upsert: 'TestResultUpsertWithoutRelationsInput'


class TestResultUpsertInput(TypedDict):
    create: 'TestResultCreateInput'
    update: 'TestResultUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_TestResult_id_OrderByInput = TypedDict(
    '_TestResult_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_TestResult_result_OrderByInput = TypedDict(
    '_TestResult_result_OrderByInput',
    {
        'result': 'SortOrder',
    },
    total=True
)

_TestResult_testerId_OrderByInput = TypedDict(
    '_TestResult_testerId_OrderByInput',
    {
        'testerId': 'SortOrder',
    },
    total=True
)

_TestResult_deviceId_OrderByInput = TypedDict(
    '_TestResult_deviceId_OrderByInput',
    {
        'deviceId': 'SortOrder',
    },
    total=True
)

_TestResult_status_OrderByInput = TypedDict(
    '_TestResult_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_TestResult_time_OrderByInput = TypedDict(
    '_TestResult_time_OrderByInput',
    {
        'time': 'SortOrder',
    },
    total=True
)

_TestResult_batteryLife_OrderByInput = TypedDict(
    '_TestResult_batteryLife_OrderByInput',
    {
        'batteryLife': 'SortOrder',
    },
    total=True
)

_TestResult_cycleCount_OrderByInput = TypedDict(
    '_TestResult_cycleCount_OrderByInput',
    {
        'cycleCount': 'SortOrder',
    },
    total=True
)

_TestResult_frp_OrderByInput = TypedDict(
    '_TestResult_frp_OrderByInput',
    {
        'frp': 'SortOrder',
    },
    total=True
)

_TestResult_imei_OrderByInput = TypedDict(
    '_TestResult_imei_OrderByInput',
    {
        'imei': 'SortOrder',
    },
    total=True
)

_TestResult_knox_OrderByInput = TypedDict(
    '_TestResult_knox_OrderByInput',
    {
        'knox': 'SortOrder',
    },
    total=True
)

_TestResult_mdm_OrderByInput = TypedDict(
    '_TestResult_mdm_OrderByInput',
    {
        'mdm': 'SortOrder',
    },
    total=True
)

_TestResult_osVersion_OrderByInput = TypedDict(
    '_TestResult_osVersion_OrderByInput',
    {
        'osVersion': 'SortOrder',
    },
    total=True
)

_TestResult_serial_OrderByInput = TypedDict(
    '_TestResult_serial_OrderByInput',
    {
        'serial': 'SortOrder',
    },
    total=True
)

_TestResult_uid_OrderByInput = TypedDict(
    '_TestResult_uid_OrderByInput',
    {
        'uid': 'SortOrder',
    },
    total=True
)

_TestResult_grade_OrderByInput = TypedDict(
    '_TestResult_grade_OrderByInput',
    {
        'grade': 'SortOrder',
    },
    total=True
)

_TestResult_carrier_OrderByInput = TypedDict(
    '_TestResult_carrier_OrderByInput',
    {
        'carrier': 'SortOrder',
    },
    total=True
)

_TestResult_storage_OrderByInput = TypedDict(
    '_TestResult_storage_OrderByInput',
    {
        'storage': 'SortOrder',
    },
    total=True
)

_TestResult_modelName_OrderByInput = TypedDict(
    '_TestResult_modelName_OrderByInput',
    {
        'modelName': 'SortOrder',
    },
    total=True
)

_TestResult_frontCameraImage_OrderByInput = TypedDict(
    '_TestResult_frontCameraImage_OrderByInput',
    {
        'frontCameraImage': 'SortOrder',
    },
    total=True
)

_TestResult_rearCameraImage_OrderByInput = TypedDict(
    '_TestResult_rearCameraImage_OrderByInput',
    {
        'rearCameraImage': 'SortOrder',
    },
    total=True
)

_TestResult_telephotoImage_OrderByInput = TypedDict(
    '_TestResult_telephotoImage_OrderByInput',
    {
        'telephotoImage': 'SortOrder',
    },
    total=True
)

_TestResult_ultrawideImage_OrderByInput = TypedDict(
    '_TestResult_ultrawideImage_OrderByInput',
    {
        'ultrawideImage': 'SortOrder',
    },
    total=True
)

_TestResult_ram_OrderByInput = TypedDict(
    '_TestResult_ram_OrderByInput',
    {
        'ram': 'SortOrder',
    },
    total=True
)

_TestResult_RelevanceInner = TypedDict(
    '_TestResult_RelevanceInner',
    {
        'fields': 'List[TestResultScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_TestResult_RelevanceOrderByInput = TypedDict(
    '_TestResult_RelevanceOrderByInput',
    {
        '_relevance': '_TestResult_RelevanceInner',
    },
    total=True
)

TestResultOrderByInput = Union[
    '_TestResult_id_OrderByInput',
    '_TestResult_result_OrderByInput',
    '_TestResult_testerId_OrderByInput',
    '_TestResult_deviceId_OrderByInput',
    '_TestResult_status_OrderByInput',
    '_TestResult_time_OrderByInput',
    '_TestResult_batteryLife_OrderByInput',
    '_TestResult_cycleCount_OrderByInput',
    '_TestResult_frp_OrderByInput',
    '_TestResult_imei_OrderByInput',
    '_TestResult_knox_OrderByInput',
    '_TestResult_mdm_OrderByInput',
    '_TestResult_osVersion_OrderByInput',
    '_TestResult_serial_OrderByInput',
    '_TestResult_uid_OrderByInput',
    '_TestResult_grade_OrderByInput',
    '_TestResult_carrier_OrderByInput',
    '_TestResult_storage_OrderByInput',
    '_TestResult_modelName_OrderByInput',
    '_TestResult_frontCameraImage_OrderByInput',
    '_TestResult_rearCameraImage_OrderByInput',
    '_TestResult_telephotoImage_OrderByInput',
    '_TestResult_ultrawideImage_OrderByInput',
    '_TestResult_ram_OrderByInput',
    '_TestResult_RelevanceOrderByInput',
]



# recursive TestResult types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TestResultRelationFilter = TypedDict(
    'TestResultRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TestResultListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TestResultInclude(TypedDict, total=False):
    """TestResult relational arguments"""
    certificate: Union[bool, 'CertificateArgsFromTestResult']
    device: Union[bool, 'DeviceArgsFromTestResult']
    tester: Union[bool, 'UserArgsFromTestResult']


    

class CompanyIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTestResultRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromTestResultRecursive1']
    plan: Union[bool, 'PlanArgsFromTestResultRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive1']
    users: Union[bool, 'FindManyUserArgsFromTestResultRecursive1']


class CompanyIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTestResultRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromTestResultRecursive2']
    plan: Union[bool, 'PlanArgsFromTestResultRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive2']
    users: Union[bool, 'FindManyUserArgsFromTestResultRecursive2']


class CompanyIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTestResultRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromTestResultRecursive3']
    plan: Union[bool, 'PlanArgsFromTestResultRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive3']
    users: Union[bool, 'FindManyUserArgsFromTestResultRecursive3']


class CompanyIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTestResultRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromTestResultRecursive4']
    plan: Union[bool, 'PlanArgsFromTestResultRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive4']
    users: Union[bool, 'FindManyUserArgsFromTestResultRecursive4']


class CompanyIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class CompanyArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyCompanyArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive1']


class PlanIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive2']


class PlanIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive3']


class PlanIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive4']


class PlanIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class PlanArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyPlanArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive1']


class CloudSettingsIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive2']


class CloudSettingsIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive3']


class CloudSettingsIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive4']


class CloudSettingsIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class CloudSettingsArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyCloudSettingsArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTestResultRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromTestResultRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive1']
    company: Union[bool, 'CompanyArgsFromTestResultRecursive1']


class UserIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTestResultRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromTestResultRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive2']
    company: Union[bool, 'CompanyArgsFromTestResultRecursive2']


class UserIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTestResultRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromTestResultRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive3']
    company: Union[bool, 'CompanyArgsFromTestResultRecursive3']


class UserIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTestResultRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromTestResultRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromTestResultRecursive4']
    company: Union[bool, 'CompanyArgsFromTestResultRecursive4']


class UserIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class UserArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyUserArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive1']


class DeviceIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive2']


class DeviceIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive3']


class DeviceIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromTestResultRecursive4']


class DeviceIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class DeviceArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyDeviceArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    certificate: Union[bool, 'CertificateArgsFromTestResultRecursive1']
    device: Union[bool, 'DeviceArgsFromTestResultRecursive1']
    tester: Union[bool, 'UserArgsFromTestResultRecursive1']


class TestResultIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    certificate: Union[bool, 'CertificateArgsFromTestResultRecursive2']
    device: Union[bool, 'DeviceArgsFromTestResultRecursive2']
    tester: Union[bool, 'UserArgsFromTestResultRecursive2']


class TestResultIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    certificate: Union[bool, 'CertificateArgsFromTestResultRecursive3']
    device: Union[bool, 'DeviceArgsFromTestResultRecursive3']
    tester: Union[bool, 'UserArgsFromTestResultRecursive3']


class TestResultIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    certificate: Union[bool, 'CertificateArgsFromTestResultRecursive4']
    device: Union[bool, 'DeviceArgsFromTestResultRecursive4']
    tester: Union[bool, 'UserArgsFromTestResultRecursive4']


class TestResultIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class TestResultArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyTestResultArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    testResult: Union[bool, 'TestResultArgsFromTestResultRecursive1']


class CertificateIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    testResult: Union[bool, 'TestResultArgsFromTestResultRecursive2']


class CertificateIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    testResult: Union[bool, 'TestResultArgsFromTestResultRecursive3']


class CertificateIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    testResult: Union[bool, 'TestResultArgsFromTestResultRecursive4']


class CertificateIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class CertificateArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyCertificateArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive1']


class SessionIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive2']


class SessionIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive3']


class SessionIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive4']


class SessionIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class SessionArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManySessionArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive1']


class CloudSessionIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive2']


class CloudSessionIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive3']


class CloudSessionIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    user: Union[bool, 'UserArgsFromTestResultRecursive4']


class CloudSessionIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class CloudSessionArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyCloudSessionArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive1']
    user: Union[bool, 'UserArgsFromTestResultRecursive1']


class TransactionIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive2']
    user: Union[bool, 'UserArgsFromTestResultRecursive2']


class TransactionIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive3']
    user: Union[bool, 'UserArgsFromTestResultRecursive3']


class TransactionIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""
    company: Union[bool, 'CompanyArgsFromTestResultRecursive4']
    user: Union[bool, 'UserArgsFromTestResultRecursive4']


class TransactionIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class TransactionArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyTransactionArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromTestResult(TypedDict, total=False):
    """Relational arguments for TestResult"""


class MobileNetworksIncludeFromTestResultRecursive1(TypedDict, total=False):
    """Relational arguments for TestResult"""


class MobileNetworksIncludeFromTestResultRecursive2(TypedDict, total=False):
    """Relational arguments for TestResult"""


class MobileNetworksIncludeFromTestResultRecursive3(TypedDict, total=False):
    """Relational arguments for TestResult"""


class MobileNetworksIncludeFromTestResultRecursive4(TypedDict, total=False):
    """Relational arguments for TestResult"""

    

class MobileNetworksArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    
    

class FindManyMobileNetworksArgsFromTestResult(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromTestResultRecursive1(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromTestResultRecursive2(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromTestResultRecursive3(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromTestResultRecursive4(TypedDict, total=False):
    """Arguments for TestResult"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyTestResultArgs = FindManyTestResultArgsFromTestResult
FindFirstTestResultArgs = FindManyTestResultArgsFromTestResult


    

class TestResultWhereInput(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    result: Union[_str, 'types.StringFilter']
    testerId: Union[_str, 'types.StringFilter']
    deviceId: Union[_str, 'types.StringFilter']
    status: Union[_bool, 'types.BooleanFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    batteryLife: Union[_str, 'types.StringFilter']
    cycleCount: Union[_int, 'types.IntFilter']
    frp: Union[_bool, 'types.BooleanFilter']
    imei: Union[_str, 'types.StringFilter']
    knox: Union[_bool, 'types.BooleanFilter']
    mdm: Union[_bool, 'types.BooleanFilter']
    osVersion: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    grade: Union[_str, 'types.StringFilter']
    carrier: Union[_str, 'types.StringFilter']
    storage: Union[_str, 'types.StringFilter']
    modelName: Union[_str, 'types.StringFilter']
    frontCameraImage: Union[None, _str, 'types.StringFilter']
    rearCameraImage: Union[None, _str, 'types.StringFilter']
    telephotoImage: Union[None, _str, 'types.StringFilter']
    ultrawideImage: Union[None, _str, 'types.StringFilter']
    ram: Union[_str, 'types.StringFilter']
    certificate: 'CertificateRelationFilter'
    device: 'DeviceRelationFilter'
    tester: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TestResultWhereInputRecursive1', List['TestResultWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TestResultWhereInputRecursive1']
    OR: List['TestResultWhereInputRecursive1']
    NOT: List['TestResultWhereInputRecursive1']


class TestResultWhereInputRecursive1(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    result: Union[_str, 'types.StringFilter']
    testerId: Union[_str, 'types.StringFilter']
    deviceId: Union[_str, 'types.StringFilter']
    status: Union[_bool, 'types.BooleanFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    batteryLife: Union[_str, 'types.StringFilter']
    cycleCount: Union[_int, 'types.IntFilter']
    frp: Union[_bool, 'types.BooleanFilter']
    imei: Union[_str, 'types.StringFilter']
    knox: Union[_bool, 'types.BooleanFilter']
    mdm: Union[_bool, 'types.BooleanFilter']
    osVersion: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    grade: Union[_str, 'types.StringFilter']
    carrier: Union[_str, 'types.StringFilter']
    storage: Union[_str, 'types.StringFilter']
    modelName: Union[_str, 'types.StringFilter']
    frontCameraImage: Union[None, _str, 'types.StringFilter']
    rearCameraImage: Union[None, _str, 'types.StringFilter']
    telephotoImage: Union[None, _str, 'types.StringFilter']
    ultrawideImage: Union[None, _str, 'types.StringFilter']
    ram: Union[_str, 'types.StringFilter']
    certificate: 'CertificateRelationFilter'
    device: 'DeviceRelationFilter'
    tester: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TestResultWhereInputRecursive2', List['TestResultWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TestResultWhereInputRecursive2']
    OR: List['TestResultWhereInputRecursive2']
    NOT: List['TestResultWhereInputRecursive2']


class TestResultWhereInputRecursive2(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    result: Union[_str, 'types.StringFilter']
    testerId: Union[_str, 'types.StringFilter']
    deviceId: Union[_str, 'types.StringFilter']
    status: Union[_bool, 'types.BooleanFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    batteryLife: Union[_str, 'types.StringFilter']
    cycleCount: Union[_int, 'types.IntFilter']
    frp: Union[_bool, 'types.BooleanFilter']
    imei: Union[_str, 'types.StringFilter']
    knox: Union[_bool, 'types.BooleanFilter']
    mdm: Union[_bool, 'types.BooleanFilter']
    osVersion: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    grade: Union[_str, 'types.StringFilter']
    carrier: Union[_str, 'types.StringFilter']
    storage: Union[_str, 'types.StringFilter']
    modelName: Union[_str, 'types.StringFilter']
    frontCameraImage: Union[None, _str, 'types.StringFilter']
    rearCameraImage: Union[None, _str, 'types.StringFilter']
    telephotoImage: Union[None, _str, 'types.StringFilter']
    ultrawideImage: Union[None, _str, 'types.StringFilter']
    ram: Union[_str, 'types.StringFilter']
    certificate: 'CertificateRelationFilter'
    device: 'DeviceRelationFilter'
    tester: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TestResultWhereInputRecursive3', List['TestResultWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TestResultWhereInputRecursive3']
    OR: List['TestResultWhereInputRecursive3']
    NOT: List['TestResultWhereInputRecursive3']


class TestResultWhereInputRecursive3(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    result: Union[_str, 'types.StringFilter']
    testerId: Union[_str, 'types.StringFilter']
    deviceId: Union[_str, 'types.StringFilter']
    status: Union[_bool, 'types.BooleanFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    batteryLife: Union[_str, 'types.StringFilter']
    cycleCount: Union[_int, 'types.IntFilter']
    frp: Union[_bool, 'types.BooleanFilter']
    imei: Union[_str, 'types.StringFilter']
    knox: Union[_bool, 'types.BooleanFilter']
    mdm: Union[_bool, 'types.BooleanFilter']
    osVersion: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    grade: Union[_str, 'types.StringFilter']
    carrier: Union[_str, 'types.StringFilter']
    storage: Union[_str, 'types.StringFilter']
    modelName: Union[_str, 'types.StringFilter']
    frontCameraImage: Union[None, _str, 'types.StringFilter']
    rearCameraImage: Union[None, _str, 'types.StringFilter']
    telephotoImage: Union[None, _str, 'types.StringFilter']
    ultrawideImage: Union[None, _str, 'types.StringFilter']
    ram: Union[_str, 'types.StringFilter']
    certificate: 'CertificateRelationFilter'
    device: 'DeviceRelationFilter'
    tester: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TestResultWhereInputRecursive4', List['TestResultWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TestResultWhereInputRecursive4']
    OR: List['TestResultWhereInputRecursive4']
    NOT: List['TestResultWhereInputRecursive4']


class TestResultWhereInputRecursive4(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    result: Union[_str, 'types.StringFilter']
    testerId: Union[_str, 'types.StringFilter']
    deviceId: Union[_str, 'types.StringFilter']
    status: Union[_bool, 'types.BooleanFilter']
    time: Union[datetime.datetime, 'types.DateTimeFilter']
    batteryLife: Union[_str, 'types.StringFilter']
    cycleCount: Union[_int, 'types.IntFilter']
    frp: Union[_bool, 'types.BooleanFilter']
    imei: Union[_str, 'types.StringFilter']
    knox: Union[_bool, 'types.BooleanFilter']
    mdm: Union[_bool, 'types.BooleanFilter']
    osVersion: Union[_str, 'types.StringFilter']
    serial: Union[_str, 'types.StringFilter']
    uid: Union[_str, 'types.StringFilter']
    grade: Union[_str, 'types.StringFilter']
    carrier: Union[_str, 'types.StringFilter']
    storage: Union[_str, 'types.StringFilter']
    modelName: Union[_str, 'types.StringFilter']
    frontCameraImage: Union[None, _str, 'types.StringFilter']
    rearCameraImage: Union[None, _str, 'types.StringFilter']
    telephotoImage: Union[None, _str, 'types.StringFilter']
    ultrawideImage: Union[None, _str, 'types.StringFilter']
    ram: Union[_str, 'types.StringFilter']
    certificate: 'CertificateRelationFilter'
    device: 'DeviceRelationFilter'
    tester: 'UserRelationFilter'



# aggregate TestResult types


    

class TestResultScalarWhereWithAggregatesInput(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    testerId: Union[_str, 'types.StringWithAggregatesFilter']
    deviceId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_bool, 'types.BooleanWithAggregatesFilter']
    time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    batteryLife: Union[_str, 'types.StringWithAggregatesFilter']
    cycleCount: Union[_int, 'types.IntWithAggregatesFilter']
    frp: Union[_bool, 'types.BooleanWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    knox: Union[_bool, 'types.BooleanWithAggregatesFilter']
    mdm: Union[_bool, 'types.BooleanWithAggregatesFilter']
    osVersion: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    grade: Union[_str, 'types.StringWithAggregatesFilter']
    carrier: Union[_str, 'types.StringWithAggregatesFilter']
    storage: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    frontCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    rearCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    telephotoImage: Union[_str, 'types.StringWithAggregatesFilter']
    ultrawideImage: Union[_str, 'types.StringWithAggregatesFilter']
    ram: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TestResultScalarWhereWithAggregatesInputRecursive1']
    OR: List['TestResultScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TestResultScalarWhereWithAggregatesInputRecursive1']


class TestResultScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    testerId: Union[_str, 'types.StringWithAggregatesFilter']
    deviceId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_bool, 'types.BooleanWithAggregatesFilter']
    time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    batteryLife: Union[_str, 'types.StringWithAggregatesFilter']
    cycleCount: Union[_int, 'types.IntWithAggregatesFilter']
    frp: Union[_bool, 'types.BooleanWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    knox: Union[_bool, 'types.BooleanWithAggregatesFilter']
    mdm: Union[_bool, 'types.BooleanWithAggregatesFilter']
    osVersion: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    grade: Union[_str, 'types.StringWithAggregatesFilter']
    carrier: Union[_str, 'types.StringWithAggregatesFilter']
    storage: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    frontCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    rearCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    telephotoImage: Union[_str, 'types.StringWithAggregatesFilter']
    ultrawideImage: Union[_str, 'types.StringWithAggregatesFilter']
    ram: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TestResultScalarWhereWithAggregatesInputRecursive2']
    OR: List['TestResultScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TestResultScalarWhereWithAggregatesInputRecursive2']


class TestResultScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    testerId: Union[_str, 'types.StringWithAggregatesFilter']
    deviceId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_bool, 'types.BooleanWithAggregatesFilter']
    time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    batteryLife: Union[_str, 'types.StringWithAggregatesFilter']
    cycleCount: Union[_int, 'types.IntWithAggregatesFilter']
    frp: Union[_bool, 'types.BooleanWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    knox: Union[_bool, 'types.BooleanWithAggregatesFilter']
    mdm: Union[_bool, 'types.BooleanWithAggregatesFilter']
    osVersion: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    grade: Union[_str, 'types.StringWithAggregatesFilter']
    carrier: Union[_str, 'types.StringWithAggregatesFilter']
    storage: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    frontCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    rearCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    telephotoImage: Union[_str, 'types.StringWithAggregatesFilter']
    ultrawideImage: Union[_str, 'types.StringWithAggregatesFilter']
    ram: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TestResultScalarWhereWithAggregatesInputRecursive3']
    OR: List['TestResultScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TestResultScalarWhereWithAggregatesInputRecursive3']


class TestResultScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    testerId: Union[_str, 'types.StringWithAggregatesFilter']
    deviceId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_bool, 'types.BooleanWithAggregatesFilter']
    time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    batteryLife: Union[_str, 'types.StringWithAggregatesFilter']
    cycleCount: Union[_int, 'types.IntWithAggregatesFilter']
    frp: Union[_bool, 'types.BooleanWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    knox: Union[_bool, 'types.BooleanWithAggregatesFilter']
    mdm: Union[_bool, 'types.BooleanWithAggregatesFilter']
    osVersion: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    grade: Union[_str, 'types.StringWithAggregatesFilter']
    carrier: Union[_str, 'types.StringWithAggregatesFilter']
    storage: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    frontCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    rearCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    telephotoImage: Union[_str, 'types.StringWithAggregatesFilter']
    ultrawideImage: Union[_str, 'types.StringWithAggregatesFilter']
    ram: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TestResultScalarWhereWithAggregatesInputRecursive4']
    OR: List['TestResultScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TestResultScalarWhereWithAggregatesInputRecursive4']


class TestResultScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """TestResult arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    result: Union[_str, 'types.StringWithAggregatesFilter']
    testerId: Union[_str, 'types.StringWithAggregatesFilter']
    deviceId: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_bool, 'types.BooleanWithAggregatesFilter']
    time: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    batteryLife: Union[_str, 'types.StringWithAggregatesFilter']
    cycleCount: Union[_int, 'types.IntWithAggregatesFilter']
    frp: Union[_bool, 'types.BooleanWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    knox: Union[_bool, 'types.BooleanWithAggregatesFilter']
    mdm: Union[_bool, 'types.BooleanWithAggregatesFilter']
    osVersion: Union[_str, 'types.StringWithAggregatesFilter']
    serial: Union[_str, 'types.StringWithAggregatesFilter']
    uid: Union[_str, 'types.StringWithAggregatesFilter']
    grade: Union[_str, 'types.StringWithAggregatesFilter']
    carrier: Union[_str, 'types.StringWithAggregatesFilter']
    storage: Union[_str, 'types.StringWithAggregatesFilter']
    modelName: Union[_str, 'types.StringWithAggregatesFilter']
    frontCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    rearCameraImage: Union[_str, 'types.StringWithAggregatesFilter']
    telephotoImage: Union[_str, 'types.StringWithAggregatesFilter']
    ultrawideImage: Union[_str, 'types.StringWithAggregatesFilter']
    ram: Union[_str, 'types.StringWithAggregatesFilter']



class TestResultGroupByOutput(TypedDict, total=False):
    id: _str
    result: _str
    testerId: _str
    deviceId: _str
    status: _bool
    time: datetime.datetime
    batteryLife: _str
    cycleCount: _int
    frp: _bool
    imei: _str
    knox: _bool
    mdm: _bool
    osVersion: _str
    serial: _str
    uid: _str
    grade: _str
    carrier: _str
    storage: _str
    modelName: _str
    frontCameraImage: _str
    rearCameraImage: _str
    telephotoImage: _str
    ultrawideImage: _str
    ram: _str
    _sum: 'TestResultSumAggregateOutput'
    _avg: 'TestResultAvgAggregateOutput'
    _min: 'TestResultMinAggregateOutput'
    _max: 'TestResultMaxAggregateOutput'
    _count: 'TestResultCountAggregateOutput'


class TestResultAvgAggregateOutput(TypedDict, total=False):
    """TestResult output for aggregating averages"""
    cycleCount: float


class TestResultSumAggregateOutput(TypedDict, total=False):
    """TestResult output for aggregating sums"""
    cycleCount: _int


class TestResultScalarAggregateOutput(TypedDict, total=False):
    """TestResult output including scalar fields"""
    id: _str
    result: _str
    testerId: _str
    deviceId: _str
    status: _bool
    time: datetime.datetime
    batteryLife: _str
    cycleCount: _int
    frp: _bool
    imei: _str
    knox: _bool
    mdm: _bool
    osVersion: _str
    serial: _str
    uid: _str
    grade: _str
    carrier: _str
    storage: _str
    modelName: _str
    frontCameraImage: _str
    rearCameraImage: _str
    telephotoImage: _str
    ultrawideImage: _str
    ram: _str


TestResultMinAggregateOutput = TestResultScalarAggregateOutput
TestResultMaxAggregateOutput = TestResultScalarAggregateOutput


class TestResultMaxAggregateInput(TypedDict, total=False):
    """TestResult input for aggregating by max"""
    id: bool
    result: bool
    testerId: bool
    deviceId: bool
    status: bool
    time: bool
    batteryLife: bool
    cycleCount: bool
    frp: bool
    imei: bool
    knox: bool
    mdm: bool
    osVersion: bool
    serial: bool
    uid: bool
    grade: bool
    carrier: bool
    storage: bool
    modelName: bool
    frontCameraImage: bool
    rearCameraImage: bool
    telephotoImage: bool
    ultrawideImage: bool
    ram: bool


class TestResultMinAggregateInput(TypedDict, total=False):
    """TestResult input for aggregating by min"""
    id: bool
    result: bool
    testerId: bool
    deviceId: bool
    status: bool
    time: bool
    batteryLife: bool
    cycleCount: bool
    frp: bool
    imei: bool
    knox: bool
    mdm: bool
    osVersion: bool
    serial: bool
    uid: bool
    grade: bool
    carrier: bool
    storage: bool
    modelName: bool
    frontCameraImage: bool
    rearCameraImage: bool
    telephotoImage: bool
    ultrawideImage: bool
    ram: bool


class TestResultNumberAggregateInput(TypedDict, total=False):
    """TestResult input for aggregating numbers"""
    cycleCount: bool


TestResultAvgAggregateInput = TestResultNumberAggregateInput
TestResultSumAggregateInput = TestResultNumberAggregateInput


TestResultCountAggregateInput = TypedDict(
    'TestResultCountAggregateInput',
    {
        'id': bool,
        'result': bool,
        'testerId': bool,
        'deviceId': bool,
        'status': bool,
        'time': bool,
        'batteryLife': bool,
        'cycleCount': bool,
        'frp': bool,
        'imei': bool,
        'knox': bool,
        'mdm': bool,
        'osVersion': bool,
        'serial': bool,
        'uid': bool,
        'grade': bool,
        'carrier': bool,
        'storage': bool,
        'modelName': bool,
        'frontCameraImage': bool,
        'rearCameraImage': bool,
        'telephotoImage': bool,
        'ultrawideImage': bool,
        'ram': bool,
        '_all': bool,
    },
    total=False,
)

TestResultCountAggregateOutput = TypedDict(
    'TestResultCountAggregateOutput',
    {
        'id': int,
        'result': int,
        'testerId': int,
        'deviceId': int,
        'status': int,
        'time': int,
        'batteryLife': int,
        'cycleCount': int,
        'frp': int,
        'imei': int,
        'knox': int,
        'mdm': int,
        'osVersion': int,
        'serial': int,
        'uid': int,
        'grade': int,
        'carrier': int,
        'storage': int,
        'modelName': int,
        'frontCameraImage': int,
        'rearCameraImage': int,
        'telephotoImage': int,
        'ultrawideImage': int,
        'ram': int,
        '_all': int,
    },
    total=False,
)


TestResultKeys = Literal[
    'id',
    'result',
    'testerId',
    'deviceId',
    'status',
    'time',
    'batteryLife',
    'cycleCount',
    'frp',
    'imei',
    'knox',
    'mdm',
    'osVersion',
    'serial',
    'uid',
    'grade',
    'carrier',
    'storage',
    'modelName',
    'frontCameraImage',
    'rearCameraImage',
    'telephotoImage',
    'ultrawideImage',
    'ram',
    'certificate',
    'device',
    'tester',
]
TestResultScalarFieldKeys = Literal[
    'id',
    'result',
    'testerId',
    'deviceId',
    'status',
    'time',
    'batteryLife',
    'cycleCount',
    'frp',
    'imei',
    'knox',
    'mdm',
    'osVersion',
    'serial',
    'uid',
    'grade',
    'carrier',
    'storage',
    'modelName',
    'frontCameraImage',
    'rearCameraImage',
    'telephotoImage',
    'ultrawideImage',
    'ram',
]
TestResultScalarFieldKeysT = TypeVar('TestResultScalarFieldKeysT', bound=TestResultScalarFieldKeys)

TestResultRelationalFieldKeys = Literal[
        'certificate',
        'device',
        'tester',
    ]

# Certificate types

class CertificateOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Certificate create method"""
    id: _str
    testResultId: _str
    expiration: Optional[datetime.datetime]
    createdAt: Optional[datetime.datetime]
    testResult: 'TestResultCreateNestedWithoutRelationsInput'


class CertificateCreateInput(CertificateOptionalCreateInput):
    """Required arguments to the Certificate create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CertificateOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Certificate create method, without relations"""
    id: _str
    testResultId: _str
    expiration: Optional[datetime.datetime]
    createdAt: Optional[datetime.datetime]


class CertificateCreateWithoutRelationsInput(CertificateOptionalCreateWithoutRelationsInput):
    """Required arguments to the Certificate create method, without relations"""

class CertificateConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CertificateCreateWithoutRelationsInput'
    where: 'CertificateWhereUniqueInput'

class CertificateCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CertificateCreateWithoutRelationsInput'
    connect: 'CertificateWhereUniqueInput'
    connect_or_create: 'CertificateConnectOrCreateWithoutRelationsInput'


class CertificateCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CertificateCreateWithoutRelationsInput', List['CertificateCreateWithoutRelationsInput']]
    connect: Union['CertificateWhereUniqueInput', List['CertificateWhereUniqueInput']]
    connect_or_create: Union['CertificateConnectOrCreateWithoutRelationsInput', List['CertificateConnectOrCreateWithoutRelationsInput']]

_CertificateWhereUnique_id_Input = TypedDict(
    '_CertificateWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_CertificateWhereUnique_testResultId_Input = TypedDict(
    '_CertificateWhereUnique_testResultId_Input',
    {
        'testResultId': '_str',
    },
    total=True
)

CertificateWhereUniqueInput = Union[
    '_CertificateWhereUnique_id_Input',
    '_CertificateWhereUnique_testResultId_Input',
]


class CertificateUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    expiration: Optional[datetime.datetime]
    createdAt: Optional[datetime.datetime]
    testResult: 'TestResultUpdateOneWithoutRelationsInput'


class CertificateUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    expiration: Optional[datetime.datetime]
    createdAt: Optional[datetime.datetime]


class CertificateUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CertificateCreateWithoutRelationsInput']
    connect: List['CertificateWhereUniqueInput']
    connect_or_create: List['CertificateConnectOrCreateWithoutRelationsInput']
    set: List['CertificateWhereUniqueInput']
    disconnect: List['CertificateWhereUniqueInput']
    delete: List['CertificateWhereUniqueInput']

    # TODO
    # update: List['CertificateUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CertificateUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CertificateScalarWhereInput']
    # upsert: List['CertificateUpserteWithWhereUniqueWithoutRelationsInput']


class CertificateUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CertificateCreateWithoutRelationsInput'
    connect: 'CertificateWhereUniqueInput'
    connect_or_create: 'CertificateConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CertificateUpdateInput'
    # upsert: 'CertificateUpsertWithoutRelationsInput'


class CertificateUpsertInput(TypedDict):
    create: 'CertificateCreateInput'
    update: 'CertificateUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Certificate_id_OrderByInput = TypedDict(
    '_Certificate_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Certificate_testResultId_OrderByInput = TypedDict(
    '_Certificate_testResultId_OrderByInput',
    {
        'testResultId': 'SortOrder',
    },
    total=True
)

_Certificate_expiration_OrderByInput = TypedDict(
    '_Certificate_expiration_OrderByInput',
    {
        'expiration': 'SortOrder',
    },
    total=True
)

_Certificate_createdAt_OrderByInput = TypedDict(
    '_Certificate_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Certificate_RelevanceInner = TypedDict(
    '_Certificate_RelevanceInner',
    {
        'fields': 'List[CertificateScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Certificate_RelevanceOrderByInput = TypedDict(
    '_Certificate_RelevanceOrderByInput',
    {
        '_relevance': '_Certificate_RelevanceInner',
    },
    total=True
)

CertificateOrderByInput = Union[
    '_Certificate_id_OrderByInput',
    '_Certificate_testResultId_OrderByInput',
    '_Certificate_expiration_OrderByInput',
    '_Certificate_createdAt_OrderByInput',
    '_Certificate_RelevanceOrderByInput',
]



# recursive Certificate types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CertificateRelationFilter = TypedDict(
    'CertificateRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CertificateListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CertificateInclude(TypedDict, total=False):
    """Certificate relational arguments"""
    testResult: Union[bool, 'TestResultArgsFromCertificate']


    

class CompanyIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCertificateRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromCertificateRecursive1']
    plan: Union[bool, 'PlanArgsFromCertificateRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive1']
    users: Union[bool, 'FindManyUserArgsFromCertificateRecursive1']


class CompanyIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCertificateRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromCertificateRecursive2']
    plan: Union[bool, 'PlanArgsFromCertificateRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive2']
    users: Union[bool, 'FindManyUserArgsFromCertificateRecursive2']


class CompanyIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCertificateRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromCertificateRecursive3']
    plan: Union[bool, 'PlanArgsFromCertificateRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive3']
    users: Union[bool, 'FindManyUserArgsFromCertificateRecursive3']


class CompanyIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCertificateRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromCertificateRecursive4']
    plan: Union[bool, 'PlanArgsFromCertificateRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive4']
    users: Union[bool, 'FindManyUserArgsFromCertificateRecursive4']


class CompanyIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class CompanyArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyCompanyArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive1']


class PlanIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive2']


class PlanIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive3']


class PlanIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive4']


class PlanIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class PlanArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyPlanArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive1']


class CloudSettingsIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive2']


class CloudSettingsIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive3']


class CloudSettingsIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive4']


class CloudSettingsIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class CloudSettingsArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyCloudSettingsArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCertificateRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromCertificateRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive1']
    company: Union[bool, 'CompanyArgsFromCertificateRecursive1']


class UserIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCertificateRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromCertificateRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive2']
    company: Union[bool, 'CompanyArgsFromCertificateRecursive2']


class UserIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCertificateRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromCertificateRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive3']
    company: Union[bool, 'CompanyArgsFromCertificateRecursive3']


class UserIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCertificateRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromCertificateRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCertificateRecursive4']
    company: Union[bool, 'CompanyArgsFromCertificateRecursive4']


class UserIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class UserArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyUserArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive1']


class DeviceIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive2']


class DeviceIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive3']


class DeviceIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCertificateRecursive4']


class DeviceIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class DeviceArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyDeviceArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    certificate: Union[bool, 'CertificateArgsFromCertificateRecursive1']
    device: Union[bool, 'DeviceArgsFromCertificateRecursive1']
    tester: Union[bool, 'UserArgsFromCertificateRecursive1']


class TestResultIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    certificate: Union[bool, 'CertificateArgsFromCertificateRecursive2']
    device: Union[bool, 'DeviceArgsFromCertificateRecursive2']
    tester: Union[bool, 'UserArgsFromCertificateRecursive2']


class TestResultIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    certificate: Union[bool, 'CertificateArgsFromCertificateRecursive3']
    device: Union[bool, 'DeviceArgsFromCertificateRecursive3']
    tester: Union[bool, 'UserArgsFromCertificateRecursive3']


class TestResultIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    certificate: Union[bool, 'CertificateArgsFromCertificateRecursive4']
    device: Union[bool, 'DeviceArgsFromCertificateRecursive4']
    tester: Union[bool, 'UserArgsFromCertificateRecursive4']


class TestResultIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class TestResultArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyTestResultArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    testResult: Union[bool, 'TestResultArgsFromCertificateRecursive1']


class CertificateIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    testResult: Union[bool, 'TestResultArgsFromCertificateRecursive2']


class CertificateIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    testResult: Union[bool, 'TestResultArgsFromCertificateRecursive3']


class CertificateIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    testResult: Union[bool, 'TestResultArgsFromCertificateRecursive4']


class CertificateIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class CertificateArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyCertificateArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive1']


class SessionIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive2']


class SessionIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive3']


class SessionIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive4']


class SessionIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class SessionArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManySessionArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive1']


class CloudSessionIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive2']


class CloudSessionIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive3']


class CloudSessionIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    user: Union[bool, 'UserArgsFromCertificateRecursive4']


class CloudSessionIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class CloudSessionArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyCloudSessionArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive1']
    user: Union[bool, 'UserArgsFromCertificateRecursive1']


class TransactionIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive2']
    user: Union[bool, 'UserArgsFromCertificateRecursive2']


class TransactionIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive3']
    user: Union[bool, 'UserArgsFromCertificateRecursive3']


class TransactionIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""
    company: Union[bool, 'CompanyArgsFromCertificateRecursive4']
    user: Union[bool, 'UserArgsFromCertificateRecursive4']


class TransactionIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class TransactionArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyTransactionArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromCertificate(TypedDict, total=False):
    """Relational arguments for Certificate"""


class MobileNetworksIncludeFromCertificateRecursive1(TypedDict, total=False):
    """Relational arguments for Certificate"""


class MobileNetworksIncludeFromCertificateRecursive2(TypedDict, total=False):
    """Relational arguments for Certificate"""


class MobileNetworksIncludeFromCertificateRecursive3(TypedDict, total=False):
    """Relational arguments for Certificate"""


class MobileNetworksIncludeFromCertificateRecursive4(TypedDict, total=False):
    """Relational arguments for Certificate"""

    

class MobileNetworksArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    
    

class FindManyMobileNetworksArgsFromCertificate(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromCertificateRecursive1(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromCertificateRecursive2(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromCertificateRecursive3(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromCertificateRecursive4(TypedDict, total=False):
    """Arguments for Certificate"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyCertificateArgs = FindManyCertificateArgsFromCertificate
FindFirstCertificateArgs = FindManyCertificateArgsFromCertificate


    

class CertificateWhereInput(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    testResultId: Union[_str, 'types.StringFilter']
    expiration: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    testResult: 'TestResultRelationFilter'

    # should be noted that AND and NOT should be Union['CertificateWhereInputRecursive1', List['CertificateWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CertificateWhereInputRecursive1']
    OR: List['CertificateWhereInputRecursive1']
    NOT: List['CertificateWhereInputRecursive1']


class CertificateWhereInputRecursive1(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    testResultId: Union[_str, 'types.StringFilter']
    expiration: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    testResult: 'TestResultRelationFilter'

    # should be noted that AND and NOT should be Union['CertificateWhereInputRecursive2', List['CertificateWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CertificateWhereInputRecursive2']
    OR: List['CertificateWhereInputRecursive2']
    NOT: List['CertificateWhereInputRecursive2']


class CertificateWhereInputRecursive2(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    testResultId: Union[_str, 'types.StringFilter']
    expiration: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    testResult: 'TestResultRelationFilter'

    # should be noted that AND and NOT should be Union['CertificateWhereInputRecursive3', List['CertificateWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CertificateWhereInputRecursive3']
    OR: List['CertificateWhereInputRecursive3']
    NOT: List['CertificateWhereInputRecursive3']


class CertificateWhereInputRecursive3(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    testResultId: Union[_str, 'types.StringFilter']
    expiration: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    testResult: 'TestResultRelationFilter'

    # should be noted that AND and NOT should be Union['CertificateWhereInputRecursive4', List['CertificateWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CertificateWhereInputRecursive4']
    OR: List['CertificateWhereInputRecursive4']
    NOT: List['CertificateWhereInputRecursive4']


class CertificateWhereInputRecursive4(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    testResultId: Union[_str, 'types.StringFilter']
    expiration: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    testResult: 'TestResultRelationFilter'



# aggregate Certificate types


    

class CertificateScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    testResultId: Union[_str, 'types.StringWithAggregatesFilter']
    expiration: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CertificateScalarWhereWithAggregatesInputRecursive1']
    OR: List['CertificateScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CertificateScalarWhereWithAggregatesInputRecursive1']


class CertificateScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    testResultId: Union[_str, 'types.StringWithAggregatesFilter']
    expiration: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CertificateScalarWhereWithAggregatesInputRecursive2']
    OR: List['CertificateScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CertificateScalarWhereWithAggregatesInputRecursive2']


class CertificateScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    testResultId: Union[_str, 'types.StringWithAggregatesFilter']
    expiration: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CertificateScalarWhereWithAggregatesInputRecursive3']
    OR: List['CertificateScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CertificateScalarWhereWithAggregatesInputRecursive3']


class CertificateScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    testResultId: Union[_str, 'types.StringWithAggregatesFilter']
    expiration: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CertificateScalarWhereWithAggregatesInputRecursive4']
    OR: List['CertificateScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CertificateScalarWhereWithAggregatesInputRecursive4']


class CertificateScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Certificate arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    testResultId: Union[_str, 'types.StringWithAggregatesFilter']
    expiration: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class CertificateGroupByOutput(TypedDict, total=False):
    id: _str
    testResultId: _str
    expiration: datetime.datetime
    createdAt: datetime.datetime
    _sum: 'CertificateSumAggregateOutput'
    _avg: 'CertificateAvgAggregateOutput'
    _min: 'CertificateMinAggregateOutput'
    _max: 'CertificateMaxAggregateOutput'
    _count: 'CertificateCountAggregateOutput'


class CertificateAvgAggregateOutput(TypedDict, total=False):
    """Certificate output for aggregating averages"""


class CertificateSumAggregateOutput(TypedDict, total=False):
    """Certificate output for aggregating sums"""


class CertificateScalarAggregateOutput(TypedDict, total=False):
    """Certificate output including scalar fields"""
    id: _str
    testResultId: _str
    expiration: datetime.datetime
    createdAt: datetime.datetime


CertificateMinAggregateOutput = CertificateScalarAggregateOutput
CertificateMaxAggregateOutput = CertificateScalarAggregateOutput


class CertificateMaxAggregateInput(TypedDict, total=False):
    """Certificate input for aggregating by max"""
    id: bool
    testResultId: bool
    expiration: bool
    createdAt: bool


class CertificateMinAggregateInput(TypedDict, total=False):
    """Certificate input for aggregating by min"""
    id: bool
    testResultId: bool
    expiration: bool
    createdAt: bool


class CertificateNumberAggregateInput(TypedDict, total=False):
    """Certificate input for aggregating numbers"""


CertificateAvgAggregateInput = CertificateNumberAggregateInput
CertificateSumAggregateInput = CertificateNumberAggregateInput


CertificateCountAggregateInput = TypedDict(
    'CertificateCountAggregateInput',
    {
        'id': bool,
        'testResultId': bool,
        'expiration': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

CertificateCountAggregateOutput = TypedDict(
    'CertificateCountAggregateOutput',
    {
        'id': int,
        'testResultId': int,
        'expiration': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


CertificateKeys = Literal[
    'id',
    'testResultId',
    'expiration',
    'createdAt',
    'testResult',
]
CertificateScalarFieldKeys = Literal[
    'id',
    'testResultId',
    'expiration',
    'createdAt',
]
CertificateScalarFieldKeysT = TypeVar('CertificateScalarFieldKeysT', bound=CertificateScalarFieldKeys)

CertificateRelationalFieldKeys = Literal[
        'testResult',
    ]

# Session types

class SessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Session create method"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class SessionCreateInput(SessionOptionalCreateInput):
    """Required arguments to the Session create method"""
    token: _str
    expiresAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Session create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime


class SessionCreateWithoutRelationsInput(SessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Session create method, without relations"""
    token: _str
    expiresAt: datetime.datetime

class SessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SessionCreateWithoutRelationsInput'
    where: 'SessionWhereUniqueInput'

class SessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'


class SessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SessionCreateWithoutRelationsInput', List['SessionCreateWithoutRelationsInput']]
    connect: Union['SessionWhereUniqueInput', List['SessionWhereUniqueInput']]
    connect_or_create: Union['SessionConnectOrCreateWithoutRelationsInput', List['SessionConnectOrCreateWithoutRelationsInput']]

_SessionWhereUnique_id_Input = TypedDict(
    '_SessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_SessionWhereUnique_token_Input = TypedDict(
    '_SessionWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

SessionWhereUniqueInput = Union[
    '_SessionWhereUnique_id_Input',
    '_SessionWhereUnique_token_Input',
]


class SessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime


class SessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SessionCreateWithoutRelationsInput']
    connect: List['SessionWhereUniqueInput']
    connect_or_create: List['SessionConnectOrCreateWithoutRelationsInput']
    set: List['SessionWhereUniqueInput']
    disconnect: List['SessionWhereUniqueInput']
    delete: List['SessionWhereUniqueInput']

    # TODO
    # update: List['SessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SessionScalarWhereInput']
    # upsert: List['SessionUpserteWithWhereUniqueWithoutRelationsInput']


class SessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SessionCreateWithoutRelationsInput'
    connect: 'SessionWhereUniqueInput'
    connect_or_create: 'SessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SessionUpdateInput'
    # upsert: 'SessionUpsertWithoutRelationsInput'


class SessionUpsertInput(TypedDict):
    create: 'SessionCreateInput'
    update: 'SessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Session_id_OrderByInput = TypedDict(
    '_Session_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Session_userId_OrderByInput = TypedDict(
    '_Session_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Session_token_OrderByInput = TypedDict(
    '_Session_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_Session_expiresAt_OrderByInput = TypedDict(
    '_Session_expiresAt_OrderByInput',
    {
        'expiresAt': 'SortOrder',
    },
    total=True
)

_Session_createdAt_OrderByInput = TypedDict(
    '_Session_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Session_RelevanceInner = TypedDict(
    '_Session_RelevanceInner',
    {
        'fields': 'List[SessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Session_RelevanceOrderByInput = TypedDict(
    '_Session_RelevanceOrderByInput',
    {
        '_relevance': '_Session_RelevanceInner',
    },
    total=True
)

SessionOrderByInput = Union[
    '_Session_id_OrderByInput',
    '_Session_userId_OrderByInput',
    '_Session_token_OrderByInput',
    '_Session_expiresAt_OrderByInput',
    '_Session_createdAt_OrderByInput',
    '_Session_RelevanceOrderByInput',
]



# recursive Session types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

SessionRelationFilter = TypedDict(
    'SessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class SessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class SessionInclude(TypedDict, total=False):
    """Session relational arguments"""
    user: Union[bool, 'UserArgsFromSession']


    

class CompanyIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromSessionRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromSessionRecursive1']
    plan: Union[bool, 'PlanArgsFromSessionRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive1']
    users: Union[bool, 'FindManyUserArgsFromSessionRecursive1']


class CompanyIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromSessionRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromSessionRecursive2']
    plan: Union[bool, 'PlanArgsFromSessionRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive2']
    users: Union[bool, 'FindManyUserArgsFromSessionRecursive2']


class CompanyIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromSessionRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromSessionRecursive3']
    plan: Union[bool, 'PlanArgsFromSessionRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive3']
    users: Union[bool, 'FindManyUserArgsFromSessionRecursive3']


class CompanyIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromSessionRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromSessionRecursive4']
    plan: Union[bool, 'PlanArgsFromSessionRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive4']
    users: Union[bool, 'FindManyUserArgsFromSessionRecursive4']


class CompanyIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class CompanyArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyCompanyArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive1']


class PlanIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive2']


class PlanIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive3']


class PlanIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive4']


class PlanIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class PlanArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyPlanArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive1']


class CloudSettingsIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive2']


class CloudSettingsIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive3']


class CloudSettingsIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive4']


class CloudSettingsIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class CloudSettingsArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyCloudSettingsArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive1']
    company: Union[bool, 'CompanyArgsFromSessionRecursive1']


class UserIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive2']
    company: Union[bool, 'CompanyArgsFromSessionRecursive2']


class UserIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive3']
    company: Union[bool, 'CompanyArgsFromSessionRecursive3']


class UserIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromSessionRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromSessionRecursive4']
    company: Union[bool, 'CompanyArgsFromSessionRecursive4']


class UserIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class UserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyUserArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive1']


class DeviceIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive2']


class DeviceIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive3']


class DeviceIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromSessionRecursive4']


class DeviceIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class DeviceArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyDeviceArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    certificate: Union[bool, 'CertificateArgsFromSessionRecursive1']
    device: Union[bool, 'DeviceArgsFromSessionRecursive1']
    tester: Union[bool, 'UserArgsFromSessionRecursive1']


class TestResultIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    certificate: Union[bool, 'CertificateArgsFromSessionRecursive2']
    device: Union[bool, 'DeviceArgsFromSessionRecursive2']
    tester: Union[bool, 'UserArgsFromSessionRecursive2']


class TestResultIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    certificate: Union[bool, 'CertificateArgsFromSessionRecursive3']
    device: Union[bool, 'DeviceArgsFromSessionRecursive3']
    tester: Union[bool, 'UserArgsFromSessionRecursive3']


class TestResultIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    certificate: Union[bool, 'CertificateArgsFromSessionRecursive4']
    device: Union[bool, 'DeviceArgsFromSessionRecursive4']
    tester: Union[bool, 'UserArgsFromSessionRecursive4']


class TestResultIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class TestResultArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyTestResultArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    testResult: Union[bool, 'TestResultArgsFromSessionRecursive1']


class CertificateIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    testResult: Union[bool, 'TestResultArgsFromSessionRecursive2']


class CertificateIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    testResult: Union[bool, 'TestResultArgsFromSessionRecursive3']


class CertificateIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    testResult: Union[bool, 'TestResultArgsFromSessionRecursive4']


class CertificateIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class CertificateArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyCertificateArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class SessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class SessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class SessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class SessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class SessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManySessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class CloudSessionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class CloudSessionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class CloudSessionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class CloudSessionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class CloudSessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyCloudSessionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive1']
    user: Union[bool, 'UserArgsFromSessionRecursive1']


class TransactionIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive2']
    user: Union[bool, 'UserArgsFromSessionRecursive2']


class TransactionIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive3']
    user: Union[bool, 'UserArgsFromSessionRecursive3']


class TransactionIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""
    company: Union[bool, 'CompanyArgsFromSessionRecursive4']
    user: Union[bool, 'UserArgsFromSessionRecursive4']


class TransactionIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class TransactionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyTransactionArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromSession(TypedDict, total=False):
    """Relational arguments for Session"""


class MobileNetworksIncludeFromSessionRecursive1(TypedDict, total=False):
    """Relational arguments for Session"""


class MobileNetworksIncludeFromSessionRecursive2(TypedDict, total=False):
    """Relational arguments for Session"""


class MobileNetworksIncludeFromSessionRecursive3(TypedDict, total=False):
    """Relational arguments for Session"""


class MobileNetworksIncludeFromSessionRecursive4(TypedDict, total=False):
    """Relational arguments for Session"""

    

class MobileNetworksArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    
    

class FindManyMobileNetworksArgsFromSession(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromSessionRecursive1(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromSessionRecursive2(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromSessionRecursive3(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromSessionRecursive4(TypedDict, total=False):
    """Arguments for Session"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManySessionArgs = FindManySessionArgsFromSession
FindFirstSessionArgs = FindManySessionArgsFromSession


    

class SessionWhereInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive1', List['SessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive1']
    OR: List['SessionWhereInputRecursive1']
    NOT: List['SessionWhereInputRecursive1']


class SessionWhereInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive2', List['SessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive2']
    OR: List['SessionWhereInputRecursive2']
    NOT: List['SessionWhereInputRecursive2']


class SessionWhereInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive3', List['SessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive3']
    OR: List['SessionWhereInputRecursive3']
    NOT: List['SessionWhereInputRecursive3']


class SessionWhereInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SessionWhereInputRecursive4', List['SessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['SessionWhereInputRecursive4']
    OR: List['SessionWhereInputRecursive4']
    NOT: List['SessionWhereInputRecursive4']


class SessionWhereInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate Session types


    

class SessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive1']


class SessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive2']


class SessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive3']


class SessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['SessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['SessionScalarWhereWithAggregatesInputRecursive4']


class SessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Session arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class SessionGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime
    _sum: 'SessionSumAggregateOutput'
    _avg: 'SessionAvgAggregateOutput'
    _min: 'SessionMinAggregateOutput'
    _max: 'SessionMaxAggregateOutput'
    _count: 'SessionCountAggregateOutput'


class SessionAvgAggregateOutput(TypedDict, total=False):
    """Session output for aggregating averages"""


class SessionSumAggregateOutput(TypedDict, total=False):
    """Session output for aggregating sums"""


class SessionScalarAggregateOutput(TypedDict, total=False):
    """Session output including scalar fields"""
    id: _str
    userId: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime


SessionMinAggregateOutput = SessionScalarAggregateOutput
SessionMaxAggregateOutput = SessionScalarAggregateOutput


class SessionMaxAggregateInput(TypedDict, total=False):
    """Session input for aggregating by max"""
    id: bool
    userId: bool
    token: bool
    expiresAt: bool
    createdAt: bool


class SessionMinAggregateInput(TypedDict, total=False):
    """Session input for aggregating by min"""
    id: bool
    userId: bool
    token: bool
    expiresAt: bool
    createdAt: bool


class SessionNumberAggregateInput(TypedDict, total=False):
    """Session input for aggregating numbers"""


SessionAvgAggregateInput = SessionNumberAggregateInput
SessionSumAggregateInput = SessionNumberAggregateInput


SessionCountAggregateInput = TypedDict(
    'SessionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'token': bool,
        'expiresAt': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

SessionCountAggregateOutput = TypedDict(
    'SessionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'token': int,
        'expiresAt': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


SessionKeys = Literal[
    'id',
    'userId',
    'token',
    'expiresAt',
    'createdAt',
    'user',
]
SessionScalarFieldKeys = Literal[
    'id',
    'userId',
    'token',
    'expiresAt',
    'createdAt',
]
SessionScalarFieldKeysT = TypeVar('SessionScalarFieldKeysT', bound=SessionScalarFieldKeys)

SessionRelationalFieldKeys = Literal[
        'user',
    ]

# CloudSession types

class CloudSessionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the CloudSession create method"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class CloudSessionCreateInput(CloudSessionOptionalCreateInput):
    """Required arguments to the CloudSession create method"""
    token: _str
    expiresAt: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CloudSessionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the CloudSession create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime


class CloudSessionCreateWithoutRelationsInput(CloudSessionOptionalCreateWithoutRelationsInput):
    """Required arguments to the CloudSession create method, without relations"""
    token: _str
    expiresAt: datetime.datetime

class CloudSessionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CloudSessionCreateWithoutRelationsInput'
    where: 'CloudSessionWhereUniqueInput'

class CloudSessionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CloudSessionCreateWithoutRelationsInput'
    connect: 'CloudSessionWhereUniqueInput'
    connect_or_create: 'CloudSessionConnectOrCreateWithoutRelationsInput'


class CloudSessionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CloudSessionCreateWithoutRelationsInput', List['CloudSessionCreateWithoutRelationsInput']]
    connect: Union['CloudSessionWhereUniqueInput', List['CloudSessionWhereUniqueInput']]
    connect_or_create: Union['CloudSessionConnectOrCreateWithoutRelationsInput', List['CloudSessionConnectOrCreateWithoutRelationsInput']]

_CloudSessionWhereUnique_id_Input = TypedDict(
    '_CloudSessionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_CloudSessionWhereUnique_token_Input = TypedDict(
    '_CloudSessionWhereUnique_token_Input',
    {
        'token': '_str',
    },
    total=True
)

CloudSessionWhereUniqueInput = Union[
    '_CloudSessionWhereUnique_id_Input',
    '_CloudSessionWhereUnique_token_Input',
]


class CloudSessionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class CloudSessionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime


class CloudSessionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CloudSessionCreateWithoutRelationsInput']
    connect: List['CloudSessionWhereUniqueInput']
    connect_or_create: List['CloudSessionConnectOrCreateWithoutRelationsInput']
    set: List['CloudSessionWhereUniqueInput']
    disconnect: List['CloudSessionWhereUniqueInput']
    delete: List['CloudSessionWhereUniqueInput']

    # TODO
    # update: List['CloudSessionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CloudSessionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CloudSessionScalarWhereInput']
    # upsert: List['CloudSessionUpserteWithWhereUniqueWithoutRelationsInput']


class CloudSessionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CloudSessionCreateWithoutRelationsInput'
    connect: 'CloudSessionWhereUniqueInput'
    connect_or_create: 'CloudSessionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CloudSessionUpdateInput'
    # upsert: 'CloudSessionUpsertWithoutRelationsInput'


class CloudSessionUpsertInput(TypedDict):
    create: 'CloudSessionCreateInput'
    update: 'CloudSessionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_CloudSession_id_OrderByInput = TypedDict(
    '_CloudSession_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_CloudSession_userId_OrderByInput = TypedDict(
    '_CloudSession_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_CloudSession_token_OrderByInput = TypedDict(
    '_CloudSession_token_OrderByInput',
    {
        'token': 'SortOrder',
    },
    total=True
)

_CloudSession_expiresAt_OrderByInput = TypedDict(
    '_CloudSession_expiresAt_OrderByInput',
    {
        'expiresAt': 'SortOrder',
    },
    total=True
)

_CloudSession_createdAt_OrderByInput = TypedDict(
    '_CloudSession_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_CloudSession_RelevanceInner = TypedDict(
    '_CloudSession_RelevanceInner',
    {
        'fields': 'List[CloudSessionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_CloudSession_RelevanceOrderByInput = TypedDict(
    '_CloudSession_RelevanceOrderByInput',
    {
        '_relevance': '_CloudSession_RelevanceInner',
    },
    total=True
)

CloudSessionOrderByInput = Union[
    '_CloudSession_id_OrderByInput',
    '_CloudSession_userId_OrderByInput',
    '_CloudSession_token_OrderByInput',
    '_CloudSession_expiresAt_OrderByInput',
    '_CloudSession_createdAt_OrderByInput',
    '_CloudSession_RelevanceOrderByInput',
]



# recursive CloudSession types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

CloudSessionRelationFilter = TypedDict(
    'CloudSessionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class CloudSessionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class CloudSessionInclude(TypedDict, total=False):
    """CloudSession relational arguments"""
    user: Union[bool, 'UserArgsFromCloudSession']


    

class CompanyIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSessionRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSessionRecursive1']
    plan: Union[bool, 'PlanArgsFromCloudSessionRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive1']
    users: Union[bool, 'FindManyUserArgsFromCloudSessionRecursive1']


class CompanyIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSessionRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSessionRecursive2']
    plan: Union[bool, 'PlanArgsFromCloudSessionRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive2']
    users: Union[bool, 'FindManyUserArgsFromCloudSessionRecursive2']


class CompanyIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSessionRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSessionRecursive3']
    plan: Union[bool, 'PlanArgsFromCloudSessionRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive3']
    users: Union[bool, 'FindManyUserArgsFromCloudSessionRecursive3']


class CompanyIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromCloudSessionRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromCloudSessionRecursive4']
    plan: Union[bool, 'PlanArgsFromCloudSessionRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive4']
    users: Union[bool, 'FindManyUserArgsFromCloudSessionRecursive4']


class CompanyIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class CompanyArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyCompanyArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive1']


class PlanIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive2']


class PlanIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive3']


class PlanIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive4']


class PlanIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class PlanArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyPlanArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive1']


class CloudSettingsIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive2']


class CloudSettingsIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive3']


class CloudSettingsIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive4']


class CloudSettingsIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class CloudSettingsArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyCloudSettingsArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSessionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSessionRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive1']
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive1']


class UserIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSessionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSessionRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive2']
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive2']


class UserIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSessionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSessionRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive3']
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive3']


class UserIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromCloudSessionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromCloudSessionRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromCloudSessionRecursive4']
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive4']


class UserIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class UserArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyUserArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive1']


class DeviceIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive2']


class DeviceIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive3']


class DeviceIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromCloudSessionRecursive4']


class DeviceIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class DeviceArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyDeviceArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    certificate: Union[bool, 'CertificateArgsFromCloudSessionRecursive1']
    device: Union[bool, 'DeviceArgsFromCloudSessionRecursive1']
    tester: Union[bool, 'UserArgsFromCloudSessionRecursive1']


class TestResultIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    certificate: Union[bool, 'CertificateArgsFromCloudSessionRecursive2']
    device: Union[bool, 'DeviceArgsFromCloudSessionRecursive2']
    tester: Union[bool, 'UserArgsFromCloudSessionRecursive2']


class TestResultIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    certificate: Union[bool, 'CertificateArgsFromCloudSessionRecursive3']
    device: Union[bool, 'DeviceArgsFromCloudSessionRecursive3']
    tester: Union[bool, 'UserArgsFromCloudSessionRecursive3']


class TestResultIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    certificate: Union[bool, 'CertificateArgsFromCloudSessionRecursive4']
    device: Union[bool, 'DeviceArgsFromCloudSessionRecursive4']
    tester: Union[bool, 'UserArgsFromCloudSessionRecursive4']


class TestResultIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class TestResultArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyTestResultArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    testResult: Union[bool, 'TestResultArgsFromCloudSessionRecursive1']


class CertificateIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    testResult: Union[bool, 'TestResultArgsFromCloudSessionRecursive2']


class CertificateIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    testResult: Union[bool, 'TestResultArgsFromCloudSessionRecursive3']


class CertificateIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    testResult: Union[bool, 'TestResultArgsFromCloudSessionRecursive4']


class CertificateIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class CertificateArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyCertificateArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive1']


class SessionIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive2']


class SessionIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive3']


class SessionIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive4']


class SessionIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class SessionArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManySessionArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive1']


class CloudSessionIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive2']


class CloudSessionIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive3']


class CloudSessionIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    user: Union[bool, 'UserArgsFromCloudSessionRecursive4']


class CloudSessionIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class CloudSessionArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyCloudSessionArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive1']
    user: Union[bool, 'UserArgsFromCloudSessionRecursive1']


class TransactionIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive2']
    user: Union[bool, 'UserArgsFromCloudSessionRecursive2']


class TransactionIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive3']
    user: Union[bool, 'UserArgsFromCloudSessionRecursive3']


class TransactionIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""
    company: Union[bool, 'CompanyArgsFromCloudSessionRecursive4']
    user: Union[bool, 'UserArgsFromCloudSessionRecursive4']


class TransactionIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class TransactionArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyTransactionArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromCloudSession(TypedDict, total=False):
    """Relational arguments for CloudSession"""


class MobileNetworksIncludeFromCloudSessionRecursive1(TypedDict, total=False):
    """Relational arguments for CloudSession"""


class MobileNetworksIncludeFromCloudSessionRecursive2(TypedDict, total=False):
    """Relational arguments for CloudSession"""


class MobileNetworksIncludeFromCloudSessionRecursive3(TypedDict, total=False):
    """Relational arguments for CloudSession"""


class MobileNetworksIncludeFromCloudSessionRecursive4(TypedDict, total=False):
    """Relational arguments for CloudSession"""

    

class MobileNetworksArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    
    

class FindManyMobileNetworksArgsFromCloudSession(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromCloudSessionRecursive1(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromCloudSessionRecursive2(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromCloudSessionRecursive3(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromCloudSessionRecursive4(TypedDict, total=False):
    """Arguments for CloudSession"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyCloudSessionArgs = FindManyCloudSessionArgsFromCloudSession
FindFirstCloudSessionArgs = FindManyCloudSessionArgsFromCloudSession


    

class CloudSessionWhereInput(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSessionWhereInputRecursive1', List['CloudSessionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['CloudSessionWhereInputRecursive1']
    OR: List['CloudSessionWhereInputRecursive1']
    NOT: List['CloudSessionWhereInputRecursive1']


class CloudSessionWhereInputRecursive1(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSessionWhereInputRecursive2', List['CloudSessionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['CloudSessionWhereInputRecursive2']
    OR: List['CloudSessionWhereInputRecursive2']
    NOT: List['CloudSessionWhereInputRecursive2']


class CloudSessionWhereInputRecursive2(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSessionWhereInputRecursive3', List['CloudSessionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['CloudSessionWhereInputRecursive3']
    OR: List['CloudSessionWhereInputRecursive3']
    NOT: List['CloudSessionWhereInputRecursive3']


class CloudSessionWhereInputRecursive3(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['CloudSessionWhereInputRecursive4', List['CloudSessionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['CloudSessionWhereInputRecursive4']
    OR: List['CloudSessionWhereInputRecursive4']
    NOT: List['CloudSessionWhereInputRecursive4']


class CloudSessionWhereInputRecursive4(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    token: Union[_str, 'types.StringFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'



# aggregate CloudSession types


    

class CloudSessionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CloudSessionScalarWhereWithAggregatesInputRecursive1']
    OR: List['CloudSessionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['CloudSessionScalarWhereWithAggregatesInputRecursive1']


class CloudSessionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CloudSessionScalarWhereWithAggregatesInputRecursive2']
    OR: List['CloudSessionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['CloudSessionScalarWhereWithAggregatesInputRecursive2']


class CloudSessionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CloudSessionScalarWhereWithAggregatesInputRecursive3']
    OR: List['CloudSessionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['CloudSessionScalarWhereWithAggregatesInputRecursive3']


class CloudSessionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['CloudSessionScalarWhereWithAggregatesInputRecursive4']
    OR: List['CloudSessionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['CloudSessionScalarWhereWithAggregatesInputRecursive4']


class CloudSessionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """CloudSession arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    token: Union[_str, 'types.StringWithAggregatesFilter']
    expiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class CloudSessionGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime
    _sum: 'CloudSessionSumAggregateOutput'
    _avg: 'CloudSessionAvgAggregateOutput'
    _min: 'CloudSessionMinAggregateOutput'
    _max: 'CloudSessionMaxAggregateOutput'
    _count: 'CloudSessionCountAggregateOutput'


class CloudSessionAvgAggregateOutput(TypedDict, total=False):
    """CloudSession output for aggregating averages"""


class CloudSessionSumAggregateOutput(TypedDict, total=False):
    """CloudSession output for aggregating sums"""


class CloudSessionScalarAggregateOutput(TypedDict, total=False):
    """CloudSession output including scalar fields"""
    id: _str
    userId: _str
    token: _str
    expiresAt: datetime.datetime
    createdAt: datetime.datetime


CloudSessionMinAggregateOutput = CloudSessionScalarAggregateOutput
CloudSessionMaxAggregateOutput = CloudSessionScalarAggregateOutput


class CloudSessionMaxAggregateInput(TypedDict, total=False):
    """CloudSession input for aggregating by max"""
    id: bool
    userId: bool
    token: bool
    expiresAt: bool
    createdAt: bool


class CloudSessionMinAggregateInput(TypedDict, total=False):
    """CloudSession input for aggregating by min"""
    id: bool
    userId: bool
    token: bool
    expiresAt: bool
    createdAt: bool


class CloudSessionNumberAggregateInput(TypedDict, total=False):
    """CloudSession input for aggregating numbers"""


CloudSessionAvgAggregateInput = CloudSessionNumberAggregateInput
CloudSessionSumAggregateInput = CloudSessionNumberAggregateInput


CloudSessionCountAggregateInput = TypedDict(
    'CloudSessionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'token': bool,
        'expiresAt': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

CloudSessionCountAggregateOutput = TypedDict(
    'CloudSessionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'token': int,
        'expiresAt': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


CloudSessionKeys = Literal[
    'id',
    'userId',
    'token',
    'expiresAt',
    'createdAt',
    'user',
]
CloudSessionScalarFieldKeys = Literal[
    'id',
    'userId',
    'token',
    'expiresAt',
    'createdAt',
]
CloudSessionScalarFieldKeysT = TypeVar('CloudSessionScalarFieldKeysT', bound=CloudSessionScalarFieldKeys)

CloudSessionRelationalFieldKeys = Literal[
        'user',
    ]

# Transaction types

class TransactionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Transaction create method"""
    id: _str
    companyId: _str
    imei: Optional[_str]
    createdAt: datetime.datetime
    amount: _int
    description: Optional[_str]
    processedAt: Optional[datetime.datetime]
    reason: 'enums.TransactionReason'
    reference: _str
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: _str
    company: 'CompanyCreateNestedWithoutRelationsInput'
    user: 'UserCreateNestedWithoutRelationsInput'


class TransactionCreateInput(TransactionOptionalCreateInput):
    """Required arguments to the Transaction create method"""
    balanceAfter: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TransactionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Transaction create method, without relations"""
    id: _str
    companyId: _str
    imei: Optional[_str]
    createdAt: datetime.datetime
    amount: _int
    description: Optional[_str]
    processedAt: Optional[datetime.datetime]
    reason: 'enums.TransactionReason'
    reference: _str
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: _str


class TransactionCreateWithoutRelationsInput(TransactionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Transaction create method, without relations"""
    balanceAfter: _int

class TransactionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TransactionCreateWithoutRelationsInput'
    where: 'TransactionWhereUniqueInput'

class TransactionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TransactionCreateWithoutRelationsInput'
    connect: 'TransactionWhereUniqueInput'
    connect_or_create: 'TransactionConnectOrCreateWithoutRelationsInput'


class TransactionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TransactionCreateWithoutRelationsInput', List['TransactionCreateWithoutRelationsInput']]
    connect: Union['TransactionWhereUniqueInput', List['TransactionWhereUniqueInput']]
    connect_or_create: Union['TransactionConnectOrCreateWithoutRelationsInput', List['TransactionConnectOrCreateWithoutRelationsInput']]

_TransactionWhereUnique_id_Input = TypedDict(
    '_TransactionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_TransactionWhereUnique_reference_Input = TypedDict(
    '_TransactionWhereUnique_reference_Input',
    {
        'reference': '_str',
    },
    total=True
)

TransactionWhereUniqueInput = Union[
    '_TransactionWhereUnique_id_Input',
    '_TransactionWhereUnique_reference_Input',
]


class TransactionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    imei: Optional[_str]
    createdAt: datetime.datetime
    amount: Union[AtomicIntInput, _int]
    balanceAfter: Union[AtomicIntInput, _int]
    description: Optional[_str]
    processedAt: Optional[datetime.datetime]
    reason: 'enums.TransactionReason'
    reference: _str
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    company: 'CompanyUpdateOneWithoutRelationsInput'
    user: 'UserUpdateOneWithoutRelationsInput'


class TransactionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    imei: Optional[_str]
    createdAt: datetime.datetime
    amount: Union[AtomicIntInput, _int]
    balanceAfter: Union[AtomicIntInput, _int]
    description: Optional[_str]
    processedAt: Optional[datetime.datetime]
    reason: 'enums.TransactionReason'
    reference: _str
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'


class TransactionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TransactionCreateWithoutRelationsInput']
    connect: List['TransactionWhereUniqueInput']
    connect_or_create: List['TransactionConnectOrCreateWithoutRelationsInput']
    set: List['TransactionWhereUniqueInput']
    disconnect: List['TransactionWhereUniqueInput']
    delete: List['TransactionWhereUniqueInput']

    # TODO
    # update: List['TransactionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TransactionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TransactionScalarWhereInput']
    # upsert: List['TransactionUpserteWithWhereUniqueWithoutRelationsInput']


class TransactionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TransactionCreateWithoutRelationsInput'
    connect: 'TransactionWhereUniqueInput'
    connect_or_create: 'TransactionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TransactionUpdateInput'
    # upsert: 'TransactionUpsertWithoutRelationsInput'


class TransactionUpsertInput(TypedDict):
    create: 'TransactionCreateInput'
    update: 'TransactionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Transaction_id_OrderByInput = TypedDict(
    '_Transaction_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Transaction_companyId_OrderByInput = TypedDict(
    '_Transaction_companyId_OrderByInput',
    {
        'companyId': 'SortOrder',
    },
    total=True
)

_Transaction_imei_OrderByInput = TypedDict(
    '_Transaction_imei_OrderByInput',
    {
        'imei': 'SortOrder',
    },
    total=True
)

_Transaction_createdAt_OrderByInput = TypedDict(
    '_Transaction_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Transaction_amount_OrderByInput = TypedDict(
    '_Transaction_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_Transaction_balanceAfter_OrderByInput = TypedDict(
    '_Transaction_balanceAfter_OrderByInput',
    {
        'balanceAfter': 'SortOrder',
    },
    total=True
)

_Transaction_description_OrderByInput = TypedDict(
    '_Transaction_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Transaction_processedAt_OrderByInput = TypedDict(
    '_Transaction_processedAt_OrderByInput',
    {
        'processedAt': 'SortOrder',
    },
    total=True
)

_Transaction_reason_OrderByInput = TypedDict(
    '_Transaction_reason_OrderByInput',
    {
        'reason': 'SortOrder',
    },
    total=True
)

_Transaction_reference_OrderByInput = TypedDict(
    '_Transaction_reference_OrderByInput',
    {
        'reference': 'SortOrder',
    },
    total=True
)

_Transaction_status_OrderByInput = TypedDict(
    '_Transaction_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Transaction_type_OrderByInput = TypedDict(
    '_Transaction_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Transaction_userId_OrderByInput = TypedDict(
    '_Transaction_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Transaction_RelevanceInner = TypedDict(
    '_Transaction_RelevanceInner',
    {
        'fields': 'List[TransactionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Transaction_RelevanceOrderByInput = TypedDict(
    '_Transaction_RelevanceOrderByInput',
    {
        '_relevance': '_Transaction_RelevanceInner',
    },
    total=True
)

TransactionOrderByInput = Union[
    '_Transaction_id_OrderByInput',
    '_Transaction_companyId_OrderByInput',
    '_Transaction_imei_OrderByInput',
    '_Transaction_createdAt_OrderByInput',
    '_Transaction_amount_OrderByInput',
    '_Transaction_balanceAfter_OrderByInput',
    '_Transaction_description_OrderByInput',
    '_Transaction_processedAt_OrderByInput',
    '_Transaction_reason_OrderByInput',
    '_Transaction_reference_OrderByInput',
    '_Transaction_status_OrderByInput',
    '_Transaction_type_OrderByInput',
    '_Transaction_userId_OrderByInput',
    '_Transaction_RelevanceOrderByInput',
]



# recursive Transaction types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

TransactionRelationFilter = TypedDict(
    'TransactionRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class TransactionListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class TransactionInclude(TypedDict, total=False):
    """Transaction relational arguments"""
    company: Union[bool, 'CompanyArgsFromTransaction']
    user: Union[bool, 'UserArgsFromTransaction']


    

class CompanyIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTransactionRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromTransactionRecursive1']
    plan: Union[bool, 'PlanArgsFromTransactionRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive1']
    users: Union[bool, 'FindManyUserArgsFromTransactionRecursive1']


class CompanyIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTransactionRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromTransactionRecursive2']
    plan: Union[bool, 'PlanArgsFromTransactionRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive2']
    users: Union[bool, 'FindManyUserArgsFromTransactionRecursive2']


class CompanyIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTransactionRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromTransactionRecursive3']
    plan: Union[bool, 'PlanArgsFromTransactionRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive3']
    users: Union[bool, 'FindManyUserArgsFromTransactionRecursive3']


class CompanyIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromTransactionRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromTransactionRecursive4']
    plan: Union[bool, 'PlanArgsFromTransactionRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive4']
    users: Union[bool, 'FindManyUserArgsFromTransactionRecursive4']


class CompanyIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class CompanyArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyCompanyArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive1']


class PlanIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive2']


class PlanIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive3']


class PlanIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive4']


class PlanIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class PlanArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyPlanArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive1']


class CloudSettingsIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive2']


class CloudSettingsIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive3']


class CloudSettingsIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive4']


class CloudSettingsIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class CloudSettingsArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyCloudSettingsArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTransactionRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromTransactionRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive1']
    company: Union[bool, 'CompanyArgsFromTransactionRecursive1']


class UserIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTransactionRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromTransactionRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive2']
    company: Union[bool, 'CompanyArgsFromTransactionRecursive2']


class UserIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTransactionRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromTransactionRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive3']
    company: Union[bool, 'CompanyArgsFromTransactionRecursive3']


class UserIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromTransactionRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromTransactionRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromTransactionRecursive4']
    company: Union[bool, 'CompanyArgsFromTransactionRecursive4']


class UserIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class UserArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyUserArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive1']


class DeviceIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive2']


class DeviceIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive3']


class DeviceIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromTransactionRecursive4']


class DeviceIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class DeviceArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyDeviceArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    certificate: Union[bool, 'CertificateArgsFromTransactionRecursive1']
    device: Union[bool, 'DeviceArgsFromTransactionRecursive1']
    tester: Union[bool, 'UserArgsFromTransactionRecursive1']


class TestResultIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    certificate: Union[bool, 'CertificateArgsFromTransactionRecursive2']
    device: Union[bool, 'DeviceArgsFromTransactionRecursive2']
    tester: Union[bool, 'UserArgsFromTransactionRecursive2']


class TestResultIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    certificate: Union[bool, 'CertificateArgsFromTransactionRecursive3']
    device: Union[bool, 'DeviceArgsFromTransactionRecursive3']
    tester: Union[bool, 'UserArgsFromTransactionRecursive3']


class TestResultIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    certificate: Union[bool, 'CertificateArgsFromTransactionRecursive4']
    device: Union[bool, 'DeviceArgsFromTransactionRecursive4']
    tester: Union[bool, 'UserArgsFromTransactionRecursive4']


class TestResultIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class TestResultArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyTestResultArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    testResult: Union[bool, 'TestResultArgsFromTransactionRecursive1']


class CertificateIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    testResult: Union[bool, 'TestResultArgsFromTransactionRecursive2']


class CertificateIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    testResult: Union[bool, 'TestResultArgsFromTransactionRecursive3']


class CertificateIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    testResult: Union[bool, 'TestResultArgsFromTransactionRecursive4']


class CertificateIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class CertificateArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyCertificateArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive1']


class SessionIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive2']


class SessionIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive3']


class SessionIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive4']


class SessionIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class SessionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManySessionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive1']


class CloudSessionIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive2']


class CloudSessionIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive3']


class CloudSessionIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    user: Union[bool, 'UserArgsFromTransactionRecursive4']


class CloudSessionIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class CloudSessionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyCloudSessionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive1']
    user: Union[bool, 'UserArgsFromTransactionRecursive1']


class TransactionIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive2']
    user: Union[bool, 'UserArgsFromTransactionRecursive2']


class TransactionIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive3']
    user: Union[bool, 'UserArgsFromTransactionRecursive3']


class TransactionIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""
    company: Union[bool, 'CompanyArgsFromTransactionRecursive4']
    user: Union[bool, 'UserArgsFromTransactionRecursive4']


class TransactionIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class TransactionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyTransactionArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromTransaction(TypedDict, total=False):
    """Relational arguments for Transaction"""


class MobileNetworksIncludeFromTransactionRecursive1(TypedDict, total=False):
    """Relational arguments for Transaction"""


class MobileNetworksIncludeFromTransactionRecursive2(TypedDict, total=False):
    """Relational arguments for Transaction"""


class MobileNetworksIncludeFromTransactionRecursive3(TypedDict, total=False):
    """Relational arguments for Transaction"""


class MobileNetworksIncludeFromTransactionRecursive4(TypedDict, total=False):
    """Relational arguments for Transaction"""

    

class MobileNetworksArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    
    

class FindManyMobileNetworksArgsFromTransaction(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromTransactionRecursive1(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromTransactionRecursive2(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromTransactionRecursive3(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromTransactionRecursive4(TypedDict, total=False):
    """Arguments for Transaction"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyTransactionArgs = FindManyTransactionArgsFromTransaction
FindFirstTransactionArgs = FindManyTransactionArgsFromTransaction


    

class TransactionWhereInput(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    imei: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    amount: Union[_int, 'types.IntFilter']
    balanceAfter: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    processedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive1', List['TransactionWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive1']
    OR: List['TransactionWhereInputRecursive1']
    NOT: List['TransactionWhereInputRecursive1']


class TransactionWhereInputRecursive1(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    imei: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    amount: Union[_int, 'types.IntFilter']
    balanceAfter: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    processedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive2', List['TransactionWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive2']
    OR: List['TransactionWhereInputRecursive2']
    NOT: List['TransactionWhereInputRecursive2']


class TransactionWhereInputRecursive2(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    imei: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    amount: Union[_int, 'types.IntFilter']
    balanceAfter: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    processedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive3', List['TransactionWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive3']
    OR: List['TransactionWhereInputRecursive3']
    NOT: List['TransactionWhereInputRecursive3']


class TransactionWhereInputRecursive3(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    imei: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    amount: Union[_int, 'types.IntFilter']
    balanceAfter: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    processedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['TransactionWhereInputRecursive4', List['TransactionWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['TransactionWhereInputRecursive4']
    OR: List['TransactionWhereInputRecursive4']
    NOT: List['TransactionWhereInputRecursive4']


class TransactionWhereInputRecursive4(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    companyId: Union[_str, 'types.StringFilter']
    imei: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    amount: Union[_int, 'types.IntFilter']
    balanceAfter: Union[_int, 'types.IntFilter']
    description: Union[None, _str, 'types.StringFilter']
    processedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringFilter']
    company: 'CompanyRelationFilter'
    user: 'UserRelationFilter'



# aggregate Transaction types


    

class TransactionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    balanceAfter: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive1']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive1']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive1']


class TransactionScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    balanceAfter: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive2']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive2']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive2']


class TransactionScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    balanceAfter: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive3']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive3']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive3']


class TransactionScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    balanceAfter: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TransactionScalarWhereWithAggregatesInputRecursive4']
    OR: List['TransactionScalarWhereWithAggregatesInputRecursive4']
    NOT: List['TransactionScalarWhereWithAggregatesInputRecursive4']


class TransactionScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Transaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    companyId: Union[_str, 'types.StringWithAggregatesFilter']
    imei: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    balanceAfter: Union[_int, 'types.IntWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    processedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    reason: 'enums.TransactionReason'
    reference: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: Union[_str, 'types.StringWithAggregatesFilter']



class TransactionGroupByOutput(TypedDict, total=False):
    id: _str
    companyId: _str
    imei: _str
    createdAt: datetime.datetime
    amount: _int
    balanceAfter: _int
    description: _str
    processedAt: datetime.datetime
    reason: 'enums.TransactionReason'
    reference: _str
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: _str
    _sum: 'TransactionSumAggregateOutput'
    _avg: 'TransactionAvgAggregateOutput'
    _min: 'TransactionMinAggregateOutput'
    _max: 'TransactionMaxAggregateOutput'
    _count: 'TransactionCountAggregateOutput'


class TransactionAvgAggregateOutput(TypedDict, total=False):
    """Transaction output for aggregating averages"""
    amount: float
    balanceAfter: float


class TransactionSumAggregateOutput(TypedDict, total=False):
    """Transaction output for aggregating sums"""
    amount: _int
    balanceAfter: _int


class TransactionScalarAggregateOutput(TypedDict, total=False):
    """Transaction output including scalar fields"""
    id: _str
    companyId: _str
    imei: _str
    createdAt: datetime.datetime
    amount: _int
    balanceAfter: _int
    description: _str
    processedAt: datetime.datetime
    reason: 'enums.TransactionReason'
    reference: _str
    status: 'enums.TransactionStatus'
    type: 'enums.TransactionType'
    userId: _str


TransactionMinAggregateOutput = TransactionScalarAggregateOutput
TransactionMaxAggregateOutput = TransactionScalarAggregateOutput


class TransactionMaxAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating by max"""
    id: bool
    companyId: bool
    imei: bool
    createdAt: bool
    amount: bool
    balanceAfter: bool
    description: bool
    processedAt: bool
    reason: bool
    reference: bool
    status: bool
    type: bool
    userId: bool


class TransactionMinAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating by min"""
    id: bool
    companyId: bool
    imei: bool
    createdAt: bool
    amount: bool
    balanceAfter: bool
    description: bool
    processedAt: bool
    reason: bool
    reference: bool
    status: bool
    type: bool
    userId: bool


class TransactionNumberAggregateInput(TypedDict, total=False):
    """Transaction input for aggregating numbers"""
    amount: bool
    balanceAfter: bool


TransactionAvgAggregateInput = TransactionNumberAggregateInput
TransactionSumAggregateInput = TransactionNumberAggregateInput


TransactionCountAggregateInput = TypedDict(
    'TransactionCountAggregateInput',
    {
        'id': bool,
        'companyId': bool,
        'imei': bool,
        'createdAt': bool,
        'amount': bool,
        'balanceAfter': bool,
        'description': bool,
        'processedAt': bool,
        'reason': bool,
        'reference': bool,
        'status': bool,
        'type': bool,
        'userId': bool,
        '_all': bool,
    },
    total=False,
)

TransactionCountAggregateOutput = TypedDict(
    'TransactionCountAggregateOutput',
    {
        'id': int,
        'companyId': int,
        'imei': int,
        'createdAt': int,
        'amount': int,
        'balanceAfter': int,
        'description': int,
        'processedAt': int,
        'reason': int,
        'reference': int,
        'status': int,
        'type': int,
        'userId': int,
        '_all': int,
    },
    total=False,
)


TransactionKeys = Literal[
    'id',
    'companyId',
    'imei',
    'createdAt',
    'amount',
    'balanceAfter',
    'description',
    'processedAt',
    'reason',
    'reference',
    'status',
    'type',
    'userId',
    'company',
    'user',
]
TransactionScalarFieldKeys = Literal[
    'id',
    'companyId',
    'imei',
    'createdAt',
    'amount',
    'balanceAfter',
    'description',
    'processedAt',
    'reason',
    'reference',
    'status',
    'type',
    'userId',
]
TransactionScalarFieldKeysT = TypeVar('TransactionScalarFieldKeysT', bound=TransactionScalarFieldKeys)

TransactionRelationalFieldKeys = Literal[
        'company',
        'user',
    ]

# MobileNetworks types

class MobileNetworksOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MobileNetworks create method"""
    id: _str
    mcc: _str
    mnc: _str
    network: _str
    iso: _str
    country: _str
    countryCode: _str


class MobileNetworksCreateInput(MobileNetworksOptionalCreateInput):
    """Required arguments to the MobileNetworks create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MobileNetworksOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MobileNetworks create method, without relations"""
    id: _str
    mcc: _str
    mnc: _str
    network: _str
    iso: _str
    country: _str
    countryCode: _str


class MobileNetworksCreateWithoutRelationsInput(MobileNetworksOptionalCreateWithoutRelationsInput):
    """Required arguments to the MobileNetworks create method, without relations"""

class MobileNetworksConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MobileNetworksCreateWithoutRelationsInput'
    where: 'MobileNetworksWhereUniqueInput'

class MobileNetworksCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MobileNetworksCreateWithoutRelationsInput'
    connect: 'MobileNetworksWhereUniqueInput'
    connect_or_create: 'MobileNetworksConnectOrCreateWithoutRelationsInput'


class MobileNetworksCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MobileNetworksCreateWithoutRelationsInput', List['MobileNetworksCreateWithoutRelationsInput']]
    connect: Union['MobileNetworksWhereUniqueInput', List['MobileNetworksWhereUniqueInput']]
    connect_or_create: Union['MobileNetworksConnectOrCreateWithoutRelationsInput', List['MobileNetworksConnectOrCreateWithoutRelationsInput']]

_MobileNetworksWhereUnique_id_Input = TypedDict(
    '_MobileNetworksWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MobileNetworksWhereUniqueInput = _MobileNetworksWhereUnique_id_Input


class MobileNetworksUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    mcc: _str
    mnc: _str
    network: _str
    iso: _str
    country: _str
    countryCode: _str


class MobileNetworksUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    mcc: _str
    mnc: _str
    network: _str
    iso: _str
    country: _str
    countryCode: _str


class MobileNetworksUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MobileNetworksCreateWithoutRelationsInput']
    connect: List['MobileNetworksWhereUniqueInput']
    connect_or_create: List['MobileNetworksConnectOrCreateWithoutRelationsInput']
    set: List['MobileNetworksWhereUniqueInput']
    disconnect: List['MobileNetworksWhereUniqueInput']
    delete: List['MobileNetworksWhereUniqueInput']

    # TODO
    # update: List['MobileNetworksUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MobileNetworksUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MobileNetworksScalarWhereInput']
    # upsert: List['MobileNetworksUpserteWithWhereUniqueWithoutRelationsInput']


class MobileNetworksUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MobileNetworksCreateWithoutRelationsInput'
    connect: 'MobileNetworksWhereUniqueInput'
    connect_or_create: 'MobileNetworksConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MobileNetworksUpdateInput'
    # upsert: 'MobileNetworksUpsertWithoutRelationsInput'


class MobileNetworksUpsertInput(TypedDict):
    create: 'MobileNetworksCreateInput'
    update: 'MobileNetworksUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MobileNetworks_id_OrderByInput = TypedDict(
    '_MobileNetworks_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MobileNetworks_mcc_OrderByInput = TypedDict(
    '_MobileNetworks_mcc_OrderByInput',
    {
        'mcc': 'SortOrder',
    },
    total=True
)

_MobileNetworks_mnc_OrderByInput = TypedDict(
    '_MobileNetworks_mnc_OrderByInput',
    {
        'mnc': 'SortOrder',
    },
    total=True
)

_MobileNetworks_network_OrderByInput = TypedDict(
    '_MobileNetworks_network_OrderByInput',
    {
        'network': 'SortOrder',
    },
    total=True
)

_MobileNetworks_iso_OrderByInput = TypedDict(
    '_MobileNetworks_iso_OrderByInput',
    {
        'iso': 'SortOrder',
    },
    total=True
)

_MobileNetworks_country_OrderByInput = TypedDict(
    '_MobileNetworks_country_OrderByInput',
    {
        'country': 'SortOrder',
    },
    total=True
)

_MobileNetworks_countryCode_OrderByInput = TypedDict(
    '_MobileNetworks_countryCode_OrderByInput',
    {
        'countryCode': 'SortOrder',
    },
    total=True
)

_MobileNetworks_RelevanceInner = TypedDict(
    '_MobileNetworks_RelevanceInner',
    {
        'fields': 'List[MobileNetworksScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MobileNetworks_RelevanceOrderByInput = TypedDict(
    '_MobileNetworks_RelevanceOrderByInput',
    {
        '_relevance': '_MobileNetworks_RelevanceInner',
    },
    total=True
)

MobileNetworksOrderByInput = Union[
    '_MobileNetworks_id_OrderByInput',
    '_MobileNetworks_mcc_OrderByInput',
    '_MobileNetworks_mnc_OrderByInput',
    '_MobileNetworks_network_OrderByInput',
    '_MobileNetworks_iso_OrderByInput',
    '_MobileNetworks_country_OrderByInput',
    '_MobileNetworks_countryCode_OrderByInput',
    '_MobileNetworks_RelevanceOrderByInput',
]



# recursive MobileNetworks types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MobileNetworksRelationFilter = TypedDict(
    'MobileNetworksRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MobileNetworksListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MobileNetworksInclude(TypedDict, total=False):
    """MobileNetworks relational arguments"""


    

class CompanyIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromMobileNetworksRecursive1']
    devices: Union[bool, 'FindManyDeviceArgsFromMobileNetworksRecursive1']
    plan: Union[bool, 'PlanArgsFromMobileNetworksRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive1']
    users: Union[bool, 'FindManyUserArgsFromMobileNetworksRecursive1']


class CompanyIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromMobileNetworksRecursive2']
    devices: Union[bool, 'FindManyDeviceArgsFromMobileNetworksRecursive2']
    plan: Union[bool, 'PlanArgsFromMobileNetworksRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive2']
    users: Union[bool, 'FindManyUserArgsFromMobileNetworksRecursive2']


class CompanyIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromMobileNetworksRecursive3']
    devices: Union[bool, 'FindManyDeviceArgsFromMobileNetworksRecursive3']
    plan: Union[bool, 'PlanArgsFromMobileNetworksRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive3']
    users: Union[bool, 'FindManyUserArgsFromMobileNetworksRecursive3']


class CompanyIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSettings: Union[bool, 'CloudSettingsArgsFromMobileNetworksRecursive4']
    devices: Union[bool, 'FindManyDeviceArgsFromMobileNetworksRecursive4']
    plan: Union[bool, 'PlanArgsFromMobileNetworksRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive4']
    users: Union[bool, 'FindManyUserArgsFromMobileNetworksRecursive4']


class CompanyIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class CompanyArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CompanyIncludeFromCompanyRecursive1'


class CompanyArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CompanyIncludeFromCompanyRecursive2'


class CompanyArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CompanyIncludeFromCompanyRecursive3'


class CompanyArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CompanyIncludeFromCompanyRecursive4'


class CompanyArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyCompanyArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive1'


class FindManyCompanyArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive2'


class FindManyCompanyArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive3'


class FindManyCompanyArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    include: 'CompanyIncludeFromCompanyRecursive4'


class FindManyCompanyArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CompanyOrderByInput', List['CompanyOrderByInput']]
    where: 'CompanyWhereInput'
    cursor: 'CompanyWhereUniqueInput'
    distinct: List['CompanyScalarFieldKeys']
    
    

class PlanIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive1']


class PlanIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive2']


class PlanIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive3']


class PlanIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive4']


class PlanIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class PlanArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'PlanIncludeFromPlanRecursive1'


class PlanArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'PlanIncludeFromPlanRecursive2'


class PlanArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'PlanIncludeFromPlanRecursive3'


class PlanArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'PlanIncludeFromPlanRecursive4'


class PlanArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyPlanArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive1'


class FindManyPlanArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive2'


class FindManyPlanArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive3'


class FindManyPlanArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    include: 'PlanIncludeFromPlanRecursive4'


class FindManyPlanArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['PlanOrderByInput', List['PlanOrderByInput']]
    where: 'PlanWhereInput'
    cursor: 'PlanWhereUniqueInput'
    distinct: List['PlanScalarFieldKeys']
    
    

class CloudSettingsIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive1']


class CloudSettingsIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive2']


class CloudSettingsIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive3']


class CloudSettingsIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive4']


class CloudSettingsIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class CloudSettingsArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class CloudSettingsArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class CloudSettingsArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class CloudSettingsArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class CloudSettingsArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyCloudSettingsArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive1'


class FindManyCloudSettingsArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive2'


class FindManyCloudSettingsArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive3'


class FindManyCloudSettingsArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    include: 'CloudSettingsIncludeFromCloudSettingsRecursive4'


class FindManyCloudSettingsArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSettingsOrderByInput', List['CloudSettingsOrderByInput']]
    where: 'CloudSettingsWhereInput'
    cursor: 'CloudSettingsWhereUniqueInput'
    distinct: List['CloudSettingsScalarFieldKeys']
    
    

class UserIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromMobileNetworksRecursive1']
    sessions: Union[bool, 'FindManySessionArgsFromMobileNetworksRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive1']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive1']
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive1']


class UserIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromMobileNetworksRecursive2']
    sessions: Union[bool, 'FindManySessionArgsFromMobileNetworksRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive2']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive2']
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive2']


class UserIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromMobileNetworksRecursive3']
    sessions: Union[bool, 'FindManySessionArgsFromMobileNetworksRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive3']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive3']
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive3']


class UserIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    cloudSessions: Union[bool, 'FindManyCloudSessionArgsFromMobileNetworksRecursive4']
    sessions: Union[bool, 'FindManySessionArgsFromMobileNetworksRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive4']
    transactions: Union[bool, 'FindManyTransactionArgsFromMobileNetworksRecursive4']
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive4']


class UserIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class UserArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyUserArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class DeviceIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive1']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive1']


class DeviceIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive2']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive2']


class DeviceIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive3']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive3']


class DeviceIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive4']
    testResults: Union[bool, 'FindManyTestResultArgsFromMobileNetworksRecursive4']


class DeviceIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class DeviceArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'DeviceIncludeFromDeviceRecursive1'


class DeviceArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'DeviceIncludeFromDeviceRecursive2'


class DeviceArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'DeviceIncludeFromDeviceRecursive3'


class DeviceArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'DeviceIncludeFromDeviceRecursive4'


class DeviceArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyDeviceArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive1'


class FindManyDeviceArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive2'


class FindManyDeviceArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive3'


class FindManyDeviceArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    include: 'DeviceIncludeFromDeviceRecursive4'


class FindManyDeviceArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['DeviceOrderByInput', List['DeviceOrderByInput']]
    where: 'DeviceWhereInput'
    cursor: 'DeviceWhereUniqueInput'
    distinct: List['DeviceScalarFieldKeys']
    
    

class TestResultIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    certificate: Union[bool, 'CertificateArgsFromMobileNetworksRecursive1']
    device: Union[bool, 'DeviceArgsFromMobileNetworksRecursive1']
    tester: Union[bool, 'UserArgsFromMobileNetworksRecursive1']


class TestResultIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    certificate: Union[bool, 'CertificateArgsFromMobileNetworksRecursive2']
    device: Union[bool, 'DeviceArgsFromMobileNetworksRecursive2']
    tester: Union[bool, 'UserArgsFromMobileNetworksRecursive2']


class TestResultIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    certificate: Union[bool, 'CertificateArgsFromMobileNetworksRecursive3']
    device: Union[bool, 'DeviceArgsFromMobileNetworksRecursive3']
    tester: Union[bool, 'UserArgsFromMobileNetworksRecursive3']


class TestResultIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    certificate: Union[bool, 'CertificateArgsFromMobileNetworksRecursive4']
    device: Union[bool, 'DeviceArgsFromMobileNetworksRecursive4']
    tester: Union[bool, 'UserArgsFromMobileNetworksRecursive4']


class TestResultIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class TestResultArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TestResultIncludeFromTestResultRecursive1'


class TestResultArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TestResultIncludeFromTestResultRecursive2'


class TestResultArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TestResultIncludeFromTestResultRecursive3'


class TestResultArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TestResultIncludeFromTestResultRecursive4'


class TestResultArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyTestResultArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive1'


class FindManyTestResultArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive2'


class FindManyTestResultArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive3'


class FindManyTestResultArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    include: 'TestResultIncludeFromTestResultRecursive4'


class FindManyTestResultArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TestResultOrderByInput', List['TestResultOrderByInput']]
    where: 'TestResultWhereInput'
    cursor: 'TestResultWhereUniqueInput'
    distinct: List['TestResultScalarFieldKeys']
    
    

class CertificateIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    testResult: Union[bool, 'TestResultArgsFromMobileNetworksRecursive1']


class CertificateIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    testResult: Union[bool, 'TestResultArgsFromMobileNetworksRecursive2']


class CertificateIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    testResult: Union[bool, 'TestResultArgsFromMobileNetworksRecursive3']


class CertificateIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    testResult: Union[bool, 'TestResultArgsFromMobileNetworksRecursive4']


class CertificateIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class CertificateArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CertificateIncludeFromCertificateRecursive1'


class CertificateArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CertificateIncludeFromCertificateRecursive2'


class CertificateArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CertificateIncludeFromCertificateRecursive3'


class CertificateArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CertificateIncludeFromCertificateRecursive4'


class CertificateArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyCertificateArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive1'


class FindManyCertificateArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive2'


class FindManyCertificateArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive3'


class FindManyCertificateArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    include: 'CertificateIncludeFromCertificateRecursive4'


class FindManyCertificateArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CertificateOrderByInput', List['CertificateOrderByInput']]
    where: 'CertificateWhereInput'
    cursor: 'CertificateWhereUniqueInput'
    distinct: List['CertificateScalarFieldKeys']
    
    

class SessionIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive1']


class SessionIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive2']


class SessionIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive3']


class SessionIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive4']


class SessionIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class SessionArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'SessionIncludeFromSessionRecursive1'


class SessionArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'SessionIncludeFromSessionRecursive2'


class SessionArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'SessionIncludeFromSessionRecursive3'


class SessionArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'SessionIncludeFromSessionRecursive4'


class SessionArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManySessionArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive1'


class FindManySessionArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive2'


class FindManySessionArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive3'


class FindManySessionArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    include: 'SessionIncludeFromSessionRecursive4'


class FindManySessionArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['SessionOrderByInput', List['SessionOrderByInput']]
    where: 'SessionWhereInput'
    cursor: 'SessionWhereUniqueInput'
    distinct: List['SessionScalarFieldKeys']
    
    

class CloudSessionIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive1']


class CloudSessionIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive2']


class CloudSessionIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive3']


class CloudSessionIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive4']


class CloudSessionIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class CloudSessionArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class CloudSessionArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class CloudSessionArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class CloudSessionArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class CloudSessionArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyCloudSessionArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive1'


class FindManyCloudSessionArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive2'


class FindManyCloudSessionArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive3'


class FindManyCloudSessionArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    include: 'CloudSessionIncludeFromCloudSessionRecursive4'


class FindManyCloudSessionArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['CloudSessionOrderByInput', List['CloudSessionOrderByInput']]
    where: 'CloudSessionWhereInput'
    cursor: 'CloudSessionWhereUniqueInput'
    distinct: List['CloudSessionScalarFieldKeys']
    
    

class TransactionIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive1']
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive1']


class TransactionIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive2']
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive2']


class TransactionIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive3']
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive3']


class TransactionIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""
    company: Union[bool, 'CompanyArgsFromMobileNetworksRecursive4']
    user: Union[bool, 'UserArgsFromMobileNetworksRecursive4']


class TransactionIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class TransactionArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TransactionIncludeFromTransactionRecursive1'


class TransactionArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TransactionIncludeFromTransactionRecursive2'


class TransactionArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TransactionIncludeFromTransactionRecursive3'


class TransactionArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'TransactionIncludeFromTransactionRecursive4'


class TransactionArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyTransactionArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive1'


class FindManyTransactionArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive2'


class FindManyTransactionArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive3'


class FindManyTransactionArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    include: 'TransactionIncludeFromTransactionRecursive4'


class FindManyTransactionArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['TransactionOrderByInput', List['TransactionOrderByInput']]
    where: 'TransactionWhereInput'
    cursor: 'TransactionWhereUniqueInput'
    distinct: List['TransactionScalarFieldKeys']
    
    

class MobileNetworksIncludeFromMobileNetworks(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""


class MobileNetworksIncludeFromMobileNetworksRecursive1(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""


class MobileNetworksIncludeFromMobileNetworksRecursive2(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""


class MobileNetworksIncludeFromMobileNetworksRecursive3(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""


class MobileNetworksIncludeFromMobileNetworksRecursive4(TypedDict, total=False):
    """Relational arguments for MobileNetworks"""

    

class MobileNetworksArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class MobileNetworksArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class MobileNetworksArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class MobileNetworksArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class MobileNetworksArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    
    

class FindManyMobileNetworksArgsFromMobileNetworks(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive1'


class FindManyMobileNetworksArgsFromMobileNetworksRecursive1(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive2'


class FindManyMobileNetworksArgsFromMobileNetworksRecursive2(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive3'


class FindManyMobileNetworksArgsFromMobileNetworksRecursive3(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    include: 'MobileNetworksIncludeFromMobileNetworksRecursive4'


class FindManyMobileNetworksArgsFromMobileNetworksRecursive4(TypedDict, total=False):
    """Arguments for MobileNetworks"""
    take: int
    skip: int
    order_by: Union['MobileNetworksOrderByInput', List['MobileNetworksOrderByInput']]
    where: 'MobileNetworksWhereInput'
    cursor: 'MobileNetworksWhereUniqueInput'
    distinct: List['MobileNetworksScalarFieldKeys']
    


FindManyMobileNetworksArgs = FindManyMobileNetworksArgsFromMobileNetworks
FindFirstMobileNetworksArgs = FindManyMobileNetworksArgsFromMobileNetworks


    

class MobileNetworksWhereInput(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    mcc: Union[_str, 'types.StringFilter']
    mnc: Union[_str, 'types.StringFilter']
    network: Union[_str, 'types.StringFilter']
    iso: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    countryCode: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MobileNetworksWhereInputRecursive1', List['MobileNetworksWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MobileNetworksWhereInputRecursive1']
    OR: List['MobileNetworksWhereInputRecursive1']
    NOT: List['MobileNetworksWhereInputRecursive1']


class MobileNetworksWhereInputRecursive1(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    mcc: Union[_str, 'types.StringFilter']
    mnc: Union[_str, 'types.StringFilter']
    network: Union[_str, 'types.StringFilter']
    iso: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    countryCode: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MobileNetworksWhereInputRecursive2', List['MobileNetworksWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MobileNetworksWhereInputRecursive2']
    OR: List['MobileNetworksWhereInputRecursive2']
    NOT: List['MobileNetworksWhereInputRecursive2']


class MobileNetworksWhereInputRecursive2(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    mcc: Union[_str, 'types.StringFilter']
    mnc: Union[_str, 'types.StringFilter']
    network: Union[_str, 'types.StringFilter']
    iso: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    countryCode: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MobileNetworksWhereInputRecursive3', List['MobileNetworksWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MobileNetworksWhereInputRecursive3']
    OR: List['MobileNetworksWhereInputRecursive3']
    NOT: List['MobileNetworksWhereInputRecursive3']


class MobileNetworksWhereInputRecursive3(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    mcc: Union[_str, 'types.StringFilter']
    mnc: Union[_str, 'types.StringFilter']
    network: Union[_str, 'types.StringFilter']
    iso: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    countryCode: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['MobileNetworksWhereInputRecursive4', List['MobileNetworksWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MobileNetworksWhereInputRecursive4']
    OR: List['MobileNetworksWhereInputRecursive4']
    NOT: List['MobileNetworksWhereInputRecursive4']


class MobileNetworksWhereInputRecursive4(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    mcc: Union[_str, 'types.StringFilter']
    mnc: Union[_str, 'types.StringFilter']
    network: Union[_str, 'types.StringFilter']
    iso: Union[_str, 'types.StringFilter']
    country: Union[_str, 'types.StringFilter']
    countryCode: Union[_str, 'types.StringFilter']



# aggregate MobileNetworks types


    

class MobileNetworksScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    mcc: Union[_str, 'types.StringWithAggregatesFilter']
    mnc: Union[_str, 'types.StringWithAggregatesFilter']
    network: Union[_str, 'types.StringWithAggregatesFilter']
    iso: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    countryCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MobileNetworksScalarWhereWithAggregatesInputRecursive1']
    OR: List['MobileNetworksScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MobileNetworksScalarWhereWithAggregatesInputRecursive1']


class MobileNetworksScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    mcc: Union[_str, 'types.StringWithAggregatesFilter']
    mnc: Union[_str, 'types.StringWithAggregatesFilter']
    network: Union[_str, 'types.StringWithAggregatesFilter']
    iso: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    countryCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MobileNetworksScalarWhereWithAggregatesInputRecursive2']
    OR: List['MobileNetworksScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MobileNetworksScalarWhereWithAggregatesInputRecursive2']


class MobileNetworksScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    mcc: Union[_str, 'types.StringWithAggregatesFilter']
    mnc: Union[_str, 'types.StringWithAggregatesFilter']
    network: Union[_str, 'types.StringWithAggregatesFilter']
    iso: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    countryCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MobileNetworksScalarWhereWithAggregatesInputRecursive3']
    OR: List['MobileNetworksScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MobileNetworksScalarWhereWithAggregatesInputRecursive3']


class MobileNetworksScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    mcc: Union[_str, 'types.StringWithAggregatesFilter']
    mnc: Union[_str, 'types.StringWithAggregatesFilter']
    network: Union[_str, 'types.StringWithAggregatesFilter']
    iso: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    countryCode: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['MobileNetworksScalarWhereWithAggregatesInputRecursive4']
    OR: List['MobileNetworksScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MobileNetworksScalarWhereWithAggregatesInputRecursive4']


class MobileNetworksScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """MobileNetworks arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    mcc: Union[_str, 'types.StringWithAggregatesFilter']
    mnc: Union[_str, 'types.StringWithAggregatesFilter']
    network: Union[_str, 'types.StringWithAggregatesFilter']
    iso: Union[_str, 'types.StringWithAggregatesFilter']
    country: Union[_str, 'types.StringWithAggregatesFilter']
    countryCode: Union[_str, 'types.StringWithAggregatesFilter']



class MobileNetworksGroupByOutput(TypedDict, total=False):
    id: _str
    mcc: _str
    mnc: _str
    network: _str
    iso: _str
    country: _str
    countryCode: _str
    _sum: 'MobileNetworksSumAggregateOutput'
    _avg: 'MobileNetworksAvgAggregateOutput'
    _min: 'MobileNetworksMinAggregateOutput'
    _max: 'MobileNetworksMaxAggregateOutput'
    _count: 'MobileNetworksCountAggregateOutput'


class MobileNetworksAvgAggregateOutput(TypedDict, total=False):
    """MobileNetworks output for aggregating averages"""


class MobileNetworksSumAggregateOutput(TypedDict, total=False):
    """MobileNetworks output for aggregating sums"""


class MobileNetworksScalarAggregateOutput(TypedDict, total=False):
    """MobileNetworks output including scalar fields"""
    id: _str
    mcc: _str
    mnc: _str
    network: _str
    iso: _str
    country: _str
    countryCode: _str


MobileNetworksMinAggregateOutput = MobileNetworksScalarAggregateOutput
MobileNetworksMaxAggregateOutput = MobileNetworksScalarAggregateOutput


class MobileNetworksMaxAggregateInput(TypedDict, total=False):
    """MobileNetworks input for aggregating by max"""
    id: bool
    mcc: bool
    mnc: bool
    network: bool
    iso: bool
    country: bool
    countryCode: bool


class MobileNetworksMinAggregateInput(TypedDict, total=False):
    """MobileNetworks input for aggregating by min"""
    id: bool
    mcc: bool
    mnc: bool
    network: bool
    iso: bool
    country: bool
    countryCode: bool


class MobileNetworksNumberAggregateInput(TypedDict, total=False):
    """MobileNetworks input for aggregating numbers"""


MobileNetworksAvgAggregateInput = MobileNetworksNumberAggregateInput
MobileNetworksSumAggregateInput = MobileNetworksNumberAggregateInput


MobileNetworksCountAggregateInput = TypedDict(
    'MobileNetworksCountAggregateInput',
    {
        'id': bool,
        'mcc': bool,
        'mnc': bool,
        'network': bool,
        'iso': bool,
        'country': bool,
        'countryCode': bool,
        '_all': bool,
    },
    total=False,
)

MobileNetworksCountAggregateOutput = TypedDict(
    'MobileNetworksCountAggregateOutput',
    {
        'id': int,
        'mcc': int,
        'mnc': int,
        'network': int,
        'iso': int,
        'country': int,
        'countryCode': int,
        '_all': int,
    },
    total=False,
)


MobileNetworksKeys = Literal[
    'id',
    'mcc',
    'mnc',
    'network',
    'iso',
    'country',
    'countryCode',
]
MobileNetworksScalarFieldKeys = Literal[
    'id',
    'mcc',
    'mnc',
    'network',
    'iso',
    'country',
    'countryCode',
]
MobileNetworksScalarFieldKeysT = TypeVar('MobileNetworksScalarFieldKeysT', bound=MobileNetworksScalarFieldKeys)

MobileNetworksRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields